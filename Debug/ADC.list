
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005980  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005b20  08005b20  00015b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c24  08005c24  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005c24  08005c24  00015c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c2c  08005c2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c2c  08005c2c  00015c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08005ca4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08005ca4  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd02  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000222d  00000000  00000000  0002fda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00031fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00032d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024369  00000000  00000000  00033a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efc4  00000000  00000000  00057db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfc6e  00000000  00000000  00066d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001469e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040dc  00000000  00000000  00146a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b08 	.word	0x08005b08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005b08 	.word	0x08005b08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800058c:	1d39      	adds	r1, r7, #4
 800058e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000592:	2201      	movs	r2, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <__io_putchar+0x20>)
 8000596:	f003 fdb7 	bl	8004108 <HAL_UART_Transmit>
	return ch;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000013c 	.word	0x2000013c

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fc31 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f84f 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f953 	bl	8000860 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ba:	f000 f933 	bl	8000824 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f901 	bl	80007c4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005c2:	f000 f899 	bl	80006f8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) !=  HAL_OK)
 80005c6:	217f      	movs	r1, #127	; 0x7f
 80005c8:	481c      	ldr	r0, [pc, #112]	; (800063c <main+0x94>)
 80005ca:	f001 fe3f 	bl	800224c <HAL_ADCEx_Calibration_Start>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <main+0x30>
    {
      Error_Handler();
 80005d4:	f000 f9ee 	bl	80009b4 <Error_Handler>
    }
  if (HAL_ADC_Start_DMA(&hadc1,
 80005d8:	2220      	movs	r2, #32
 80005da:	4919      	ldr	r1, [pc, #100]	; (8000640 <main+0x98>)
 80005dc:	4817      	ldr	r0, [pc, #92]	; (800063c <main+0x94>)
 80005de:	f001 f805 	bl	80015ec <HAL_ADC_Start_DMA>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <main+0x44>
                          (uint32_t *)aADCxConvertedData,
                          ADC_CONVERTED_DATA_BUFFER_SIZE
                         ) != HAL_OK)
    {
      Error_Handler();
 80005e8:	f000 f9e4 	bl	80009b4 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80005ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f0:	4814      	ldr	r0, [pc, #80]	; (8000644 <main+0x9c>)
 80005f2:	f002 fb27 	bl	8002c44 <HAL_GPIO_TogglePin>


	  printf("aADCxConvertedData[%d] = %d\r\n", idx, aADCxConvertedData[idx]);
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <main+0xa0>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4619      	mov	r1, r3
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <main+0xa0>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <main+0x98>)
 8000604:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000608:	461a      	mov	r2, r3
 800060a:	4810      	ldr	r0, [pc, #64]	; (800064c <main+0xa4>)
 800060c:	f004 fa78 	bl	8004b00 <iprintf>
	  idx++;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <main+0xa0>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <main+0xa0>)
 800061a:	701a      	strb	r2, [r3, #0]
	  if(idx > 31){
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <main+0xa0>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b1f      	cmp	r3, #31
 8000622:	d905      	bls.n	8000630 <main+0x88>
		  idx = 0;
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <main+0xa0>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
		  printf("\r\n");
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <main+0xa8>)
 800062c:	f004 faee 	bl	8004c0c <puts>

	  }
	  HAL_Delay(1000);
 8000630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000634:	f000 fc6a 	bl	8000f0c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000638:	e7d8      	b.n	80005ec <main+0x44>
 800063a:	bf00      	nop
 800063c:	2000008c 	.word	0x2000008c
 8000640:	200001c0 	.word	0x200001c0
 8000644:	48000400 	.word	0x48000400
 8000648:	20000200 	.word	0x20000200
 800064c:	08005b20 	.word	0x08005b20
 8000650:	08005b40 	.word	0x08005b40

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	; 0x58
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2244      	movs	r2, #68	; 0x44
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fa44 	bl	8004af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000676:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067a:	f002 fb0b 	bl	8002c94 <HAL_PWREx_ControlVoltageScaling>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000684:	f000 f996 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000690:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	2340      	movs	r3, #64	; 0x40
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069a:	2302      	movs	r3, #2
 800069c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006a2:	230a      	movs	r3, #10
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006a6:	2307      	movs	r3, #7
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fb42 	bl	8002d40 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006c2:	f000 f977 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2303      	movs	r3, #3
 80006cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	2104      	movs	r1, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 ff42 	bl	8003568 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ea:	f000 f963 	bl	80009b4 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3758      	adds	r7, #88	; 0x58
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800070e:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <MX_ADC1_Init+0xc0>)
 8000710:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <MX_ADC1_Init+0xc4>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_ADC1_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800071a:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <MX_ADC1_Init+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <MX_ADC1_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000726:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <MX_ADC1_Init+0xc0>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_ADC1_Init+0xc0>)
 800072e:	2204      	movs	r2, #4
 8000730:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_ADC1_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_ADC1_Init+0xc0>)
 800073a:	2201      	movs	r2, #1
 800073c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_ADC1_Init+0xc0>)
 8000740:	2201      	movs	r2, #1
 8000742:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_ADC1_Init+0xc0>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_ADC1_Init+0xc0>)
 800074e:	2200      	movs	r2, #0
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_ADC1_Init+0xc0>)
 8000754:	2200      	movs	r2, #0
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_ADC1_Init+0xc0>)
 800075a:	2201      	movs	r2, #1
 800075c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_ADC1_Init+0xc0>)
 8000762:	2200      	movs	r2, #0
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_ADC1_Init+0xc0>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_ADC1_Init+0xc0>)
 8000770:	2204      	movs	r2, #4
 8000772:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000774:	4810      	ldr	r0, [pc, #64]	; (80007b8 <MX_ADC1_Init+0xc0>)
 8000776:	f000 fded 	bl	8001354 <HAL_ADC_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000780:	f000 f918 	bl	80009b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_ADC1_Init+0xc8>)
 8000786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000788:	2306      	movs	r3, #6
 800078a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000790:	237f      	movs	r3, #127	; 0x7f
 8000792:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000794:	2304      	movs	r3, #4
 8000796:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_ADC1_Init+0xc0>)
 80007a2:	f000 ffb1 	bl	8001708 <HAL_ADC_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80007ac:	f000 f902 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2000008c 	.word	0x2000008c
 80007bc:	50040000 	.word	0x50040000
 80007c0:	04300002 	.word	0x04300002

080007c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_USART2_UART_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x58>)
 8000808:	f003 fc30 	bl	800406c <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f8cf 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000013c 	.word	0x2000013c
 8000820:	40004400 	.word	0x40004400

08000824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_DMA_Init+0x38>)
 800082c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <MX_DMA_Init+0x38>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6493      	str	r3, [r2, #72]	; 0x48
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_DMA_Init+0x38>)
 8000838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	200b      	movs	r0, #11
 8000848:	f001 fe3b 	bl	80024c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800084c:	200b      	movs	r0, #11
 800084e:	f001 fe54 	bl	80024fa <HAL_NVIC_EnableIRQ>

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	4b3c      	ldr	r3, [pc, #240]	; (8000968 <MX_GPIO_Init+0x108>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a3b      	ldr	r2, [pc, #236]	; (8000968 <MX_GPIO_Init+0x108>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b39      	ldr	r3, [pc, #228]	; (8000968 <MX_GPIO_Init+0x108>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	4b36      	ldr	r3, [pc, #216]	; (8000968 <MX_GPIO_Init+0x108>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a35      	ldr	r2, [pc, #212]	; (8000968 <MX_GPIO_Init+0x108>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b33      	ldr	r3, [pc, #204]	; (8000968 <MX_GPIO_Init+0x108>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b30      	ldr	r3, [pc, #192]	; (8000968 <MX_GPIO_Init+0x108>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <MX_GPIO_Init+0x108>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <MX_GPIO_Init+0x108>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <MX_GPIO_Init+0x108>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a29      	ldr	r2, [pc, #164]	; (8000968 <MX_GPIO_Init+0x108>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_GPIO_Init+0x108>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	21b0      	movs	r1, #176	; 0xb0
 80008da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008de:	f002 f999 	bl	8002c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e8:	4820      	ldr	r0, [pc, #128]	; (800096c <MX_GPIO_Init+0x10c>)
 80008ea:	f002 f993 	bl	8002c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	481a      	ldr	r0, [pc, #104]	; (8000970 <MX_GPIO_Init+0x110>)
 8000906:	f002 f80b 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800090a:	23b0      	movs	r3, #176	; 0xb0
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f001 fffc 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000928:	2340      	movs	r3, #64	; 0x40
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000930:	2301      	movs	r3, #1
 8000932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093e:	f001 ffef 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_GPIO_Init+0x10c>)
 800095c:	f001 ffe0 	bl	8002920 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	; 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40021000 	.word	0x40021000
 800096c:	48000400 	.word	0x48000400
 8000970:	48000800 	.word	0x48000800

08000974 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1){
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000982:	4803      	ldr	r0, [pc, #12]	; (8000990 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000984:	f002 f946 	bl	8002c14 <HAL_GPIO_WritePin>
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	48000400 	.word	0x48000400

08000994 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a2:	4803      	ldr	r0, [pc, #12]	; (80009b0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80009a4:	f002 f936 	bl	8002c14 <HAL_GPIO_WritePin>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	48000400 	.word	0x48000400

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x44>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <HAL_MspInit+0x44>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6613      	str	r3, [r2, #96]	; 0x60
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_MspInit+0x44>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_MspInit+0x44>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x44>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x44>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b0a4      	sub	sp, #144	; 0x90
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2268      	movs	r2, #104	; 0x68
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 f861 	bl	8004af0 <memset>
  if(hadc->Instance==ADC1)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a3b      	ldr	r2, [pc, #236]	; (8000b20 <HAL_ADC_MspInit+0x118>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d16f      	bne.n	8000b18 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a3c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a42:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a50:	2307      	movs	r3, #7
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 ffa2 	bl	80039b0 <HAL_RCCEx_PeriphCLKConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000a72:	f7ff ff9f 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <HAL_ADC_MspInit+0x11c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a2a      	ldr	r2, [pc, #168]	; (8000b24 <HAL_ADC_MspInit+0x11c>)
 8000a7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <HAL_ADC_MspInit+0x11c>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <HAL_ADC_MspInit+0x11c>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a24      	ldr	r2, [pc, #144]	; (8000b24 <HAL_ADC_MspInit+0x11c>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <HAL_ADC_MspInit+0x11c>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aaa:	230b      	movs	r3, #11
 8000aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000aba:	4619      	mov	r1, r3
 8000abc:	481a      	ldr	r0, [pc, #104]	; (8000b28 <HAL_ADC_MspInit+0x120>)
 8000abe:	f001 ff2f 	bl	8002920 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_ADC_MspInit+0x124>)
 8000ac4:	4a1a      	ldr	r2, [pc, #104]	; (8000b30 <HAL_ADC_MspInit+0x128>)
 8000ac6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_ADC_MspInit+0x124>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_ADC_MspInit+0x124>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_ADC_MspInit+0x124>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_ADC_MspInit+0x124>)
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_ADC_MspInit+0x124>)
 8000ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_ADC_MspInit+0x124>)
 8000aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_ADC_MspInit+0x124>)
 8000af2:	2220      	movs	r2, #32
 8000af4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_ADC_MspInit+0x124>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000afc:	480b      	ldr	r0, [pc, #44]	; (8000b2c <HAL_ADC_MspInit+0x124>)
 8000afe:	f001 fd17 	bl	8002530 <HAL_DMA_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8000b08:	f7ff ff54 	bl	80009b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_ADC_MspInit+0x124>)
 8000b10:	651a      	str	r2, [r3, #80]	; 0x50
 8000b12:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_ADC_MspInit+0x124>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b18:	bf00      	nop
 8000b1a:	3790      	adds	r7, #144	; 0x90
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	50040000 	.word	0x50040000
 8000b24:	40021000 	.word	0x40021000
 8000b28:	48000800 	.word	0x48000800
 8000b2c:	200000f4 	.word	0x200000f4
 8000b30:	40020008 	.word	0x40020008

08000b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0a4      	sub	sp, #144	; 0x90
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2268      	movs	r2, #104	; 0x68
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f003 ffcb 	bl	8004af0 <memset>
  if(huart->Instance==USART2)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a21      	ldr	r2, [pc, #132]	; (8000be4 <HAL_UART_MspInit+0xb0>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d13a      	bne.n	8000bda <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4618      	mov	r0, r3
 8000b72:	f002 ff1d 	bl	80039b0 <HAL_RCCEx_PeriphCLKConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b7c:	f7ff ff1a 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <HAL_UART_MspInit+0xb4>)
 8000b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b84:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <HAL_UART_MspInit+0xb4>)
 8000b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_UART_MspInit+0xb4>)
 8000b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <HAL_UART_MspInit+0xb4>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9c:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <HAL_UART_MspInit+0xb4>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_UART_MspInit+0xb4>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f001 fea3 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3790      	adds	r7, #144	; 0x90
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40004400 	.word	0x40004400
 8000be8:	40021000 	.word	0x40021000

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 f948 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <DMA1_Channel1_IRQHandler+0x10>)
 8000c46:	f001 fd8b 	bl	8002760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200000f4 	.word	0x200000f4

08000c54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	e00a      	b.n	8000c7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c66:	f3af 8000 	nop.w
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	b2ca      	uxtb	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbf0      	blt.n	8000c66 <_read+0x12>
  }

  return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	e009      	b.n	8000cb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fc6b 	bl	8000584 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf1      	blt.n	8000ca0 <_write+0x12>
  }
  return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_close>:

int _close(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cee:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_isatty>:

int _isatty(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f003 fe9c 	bl	8004a9c <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20028000 	.word	0x20028000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	20000204 	.word	0x20000204
 8000d98:	20000220 	.word	0x20000220

08000d9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc4:	f7ff ffea 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000dca:	490d      	ldr	r1, [pc, #52]	; (8000e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <LoopForever+0xe>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de0:	4c0a      	ldr	r4, [pc, #40]	; (8000e0c <LoopForever+0x16>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dee:	f003 fe5b 	bl	8004aa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df2:	f7ff fbd9 	bl	80005a8 <main>

08000df6 <LoopForever>:

LoopForever:
    b LoopForever
 8000df6:	e7fe      	b.n	8000df6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000df8:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e04:	08005c34 	.word	0x08005c34
  ldr r2, =_sbss
 8000e08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e0c:	2000021c 	.word	0x2000021c

08000e10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC1_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <HAL_Init+0x3c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <HAL_Init+0x3c>)
 8000e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f001 fb3e 	bl	80024ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e30:	2000      	movs	r0, #0
 8000e32:	f000 f80f 	bl	8000e54 <HAL_InitTick>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	71fb      	strb	r3, [r7, #7]
 8000e40:	e001      	b.n	8000e46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e42:	f7ff fdbd 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e46:	79fb      	ldrb	r3, [r7, #7]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40022000 	.word	0x40022000

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_InitTick+0x6c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d023      	beq.n	8000eb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_InitTick+0x70>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_InitTick+0x6c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 fb49 	bl	8002516 <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10f      	bne.n	8000eaa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d809      	bhi.n	8000ea4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f001 fb13 	bl	80024c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_InitTick+0x74>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e007      	b.n	8000eb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e004      	b.n	8000eb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	e001      	b.n	8000eb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000208 	.word	0x20000208

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000208 	.word	0x20000208

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff ffee 	bl	8000ef4 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffde 	bl	8000ef4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	609a      	str	r2, [r3, #8]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3360      	adds	r3, #96	; 0x60
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <LL_ADC_SetOffset+0x44>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	4313      	orrs	r3, r2
 8000fec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ff4:	bf00      	nop
 8000ff6:	371c      	adds	r7, #28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	03fff000 	.word	0x03fff000

08001004 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3360      	adds	r3, #96	; 0x60
 8001012:	461a      	mov	r2, r3
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3360      	adds	r3, #96	; 0x60
 8001040:	461a      	mov	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	431a      	orrs	r2, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800105a:	bf00      	nop
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	615a      	str	r2, [r3, #20]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b087      	sub	sp, #28
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	3330      	adds	r3, #48	; 0x30
 80010c2:	461a      	mov	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	0a1b      	lsrs	r3, r3, #8
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	f003 030c 	and.w	r3, r3, #12
 80010ce:	4413      	add	r3, r2
 80010d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	211f      	movs	r1, #31
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	401a      	ands	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	0e9b      	lsrs	r3, r3, #26
 80010ea:	f003 011f 	and.w	r1, r3, #31
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f003 031f 	and.w	r3, r3, #31
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	431a      	orrs	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010fe:	bf00      	nop
 8001100:	371c      	adds	r7, #28
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800110a:	b480      	push	{r7}
 800110c:	b087      	sub	sp, #28
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3314      	adds	r3, #20
 800111a:	461a      	mov	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	0e5b      	lsrs	r3, r3, #25
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	4413      	add	r3, r2
 8001128:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	0d1b      	lsrs	r3, r3, #20
 8001132:	f003 031f 	and.w	r3, r3, #31
 8001136:	2107      	movs	r1, #7
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	401a      	ands	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	0d1b      	lsrs	r3, r3, #20
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	431a      	orrs	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001154:	bf00      	nop
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001178:	43db      	mvns	r3, r3
 800117a:	401a      	ands	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0318 	and.w	r3, r3, #24
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001184:	40d9      	lsrs	r1, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	400b      	ands	r3, r1
 800118a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800118e:	431a      	orrs	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	0007ffff 	.word	0x0007ffff

080011a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6093      	str	r3, [r2, #8]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011e0:	d101      	bne.n	80011e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001204:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001208:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001230:	d101      	bne.n	8001236 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001258:	f043 0201 	orr.w	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800127c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001280:	f043 0202 	orr.w	r2, r3, #2
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d101      	bne.n	80012ac <LL_ADC_IsEnabled+0x18>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <LL_ADC_IsEnabled+0x1a>
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d101      	bne.n	80012d2 <LL_ADC_IsDisableOngoing+0x18>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_ADC_IsDisableOngoing+0x1a>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012f4:	f043 0204 	orr.w	r2, r3, #4
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b04      	cmp	r3, #4
 800131a:	d101      	bne.n	8001320 <LL_ADC_REG_IsConversionOngoing+0x18>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b08      	cmp	r3, #8
 8001340:	d101      	bne.n	8001346 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e12f      	b.n	80015ce <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	2b00      	cmp	r3, #0
 800137a:	d109      	bne.n	8001390 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fb43 	bl	8000a08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff19 	bl	80011cc <LL_ADC_IsDeepPowerDownEnabled>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d004      	beq.n	80013aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff feff 	bl	80011a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff34 	bl	800121c <LL_ADC_IsInternalRegulatorEnabled>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d115      	bne.n	80013e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff18 	bl	80011f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013c4:	4b84      	ldr	r3, [pc, #528]	; (80015d8 <HAL_ADC_Init+0x284>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	099b      	lsrs	r3, r3, #6
 80013ca:	4a84      	ldr	r2, [pc, #528]	; (80015dc <HAL_ADC_Init+0x288>)
 80013cc:	fba2 2303 	umull	r2, r3, r2, r3
 80013d0:	099b      	lsrs	r3, r3, #6
 80013d2:	3301      	adds	r3, #1
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013d8:	e002      	b.n	80013e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3b01      	subs	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f9      	bne.n	80013da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff16 	bl	800121c <LL_ADC_IsInternalRegulatorEnabled>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10d      	bne.n	8001412 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	f043 0210 	orr.w	r2, r3, #16
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001406:	f043 0201 	orr.w	r2, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff76 	bl	8001308 <LL_ADC_REG_IsConversionOngoing>
 800141c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 80c8 	bne.w	80015bc <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f040 80c4 	bne.w	80015bc <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800143c:	f043 0202 	orr.w	r2, r3, #2
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff23 	bl	8001294 <LL_ADC_IsEnabled>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10b      	bne.n	800146c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001454:	4862      	ldr	r0, [pc, #392]	; (80015e0 <HAL_ADC_Init+0x28c>)
 8001456:	f7ff ff1d 	bl	8001294 <LL_ADC_IsEnabled>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d105      	bne.n	800146c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4619      	mov	r1, r3
 8001466:	485f      	ldr	r0, [pc, #380]	; (80015e4 <HAL_ADC_Init+0x290>)
 8001468:	f7ff fd74 	bl	8000f54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7e5b      	ldrb	r3, [r3, #25]
 8001470:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001476:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800147c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001482:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d106      	bne.n	80014a8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	3b01      	subs	r3, #1
 80014a0:	045b      	lsls	r3, r3, #17
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <HAL_ADC_Init+0x294>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	69b9      	ldr	r1, [r7, #24]
 80014d4:	430b      	orrs	r3, r1
 80014d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff13 	bl	8001308 <LL_ADC_REG_IsConversionOngoing>
 80014e2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff20 	bl	800132e <LL_ADC_INJ_IsConversionOngoing>
 80014ee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d140      	bne.n	8001578 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d13d      	bne.n	8001578 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7e1b      	ldrb	r3, [r3, #24]
 8001504:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001506:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800150e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800151e:	f023 0306 	bic.w	r3, r3, #6
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	69b9      	ldr	r1, [r7, #24]
 8001528:	430b      	orrs	r3, r1
 800152a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001532:	2b01      	cmp	r3, #1
 8001534:	d118      	bne.n	8001568 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800154c:	4311      	orrs	r1, r2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001552:	4311      	orrs	r1, r2
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001558:	430a      	orrs	r2, r1
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0201 	orr.w	r2, r2, #1
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	e007      	b.n	8001578 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d10c      	bne.n	800159a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f023 010f 	bic.w	r1, r3, #15
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	1e5a      	subs	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	631a      	str	r2, [r3, #48]	; 0x30
 8001598:	e007      	b.n	80015aa <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 020f 	bic.w	r2, r2, #15
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ae:	f023 0303 	bic.w	r3, r3, #3
 80015b2:	f043 0201 	orr.w	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	659a      	str	r2, [r3, #88]	; 0x58
 80015ba:	e007      	b.n	80015cc <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	f043 0210 	orr.w	r2, r3, #16
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000000 	.word	0x20000000
 80015dc:	053e2d63 	.word	0x053e2d63
 80015e0:	50040000 	.word	0x50040000
 80015e4:	50040300 	.word	0x50040300
 80015e8:	fff0c007 	.word	0xfff0c007

080015ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fe83 	bl	8001308 <LL_ADC_REG_IsConversionOngoing>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d167      	bne.n	80016d8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_ADC_Start_DMA+0x2a>
 8001612:	2302      	movs	r3, #2
 8001614:	e063      	b.n	80016de <HAL_ADC_Start_DMA+0xf2>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 fc6e 	bl	8001f00 <ADC_Enable>
 8001624:	4603      	mov	r3, r0
 8001626:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d14f      	bne.n	80016ce <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001652:	f023 0206 	bic.w	r2, r3, #6
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	65da      	str	r2, [r3, #92]	; 0x5c
 800165a:	e002      	b.n	8001662 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001666:	4a20      	ldr	r2, [pc, #128]	; (80016e8 <HAL_ADC_Start_DMA+0xfc>)
 8001668:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800166e:	4a1f      	ldr	r2, [pc, #124]	; (80016ec <HAL_ADC_Start_DMA+0x100>)
 8001670:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001676:	4a1e      	ldr	r2, [pc, #120]	; (80016f0 <HAL_ADC_Start_DMA+0x104>)
 8001678:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	221c      	movs	r2, #28
 8001680:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0210 	orr.w	r2, r2, #16
 8001698:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0201 	orr.w	r2, r2, #1
 80016a8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3340      	adds	r3, #64	; 0x40
 80016b4:	4619      	mov	r1, r3
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f000 fff1 	bl	80026a0 <HAL_DMA_Start_IT>
 80016be:	4603      	mov	r3, r0
 80016c0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fe0a 	bl	80012e0 <LL_ADC_REG_StartConversion>
 80016cc:	e006      	b.n	80016dc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80016d6:	e001      	b.n	80016dc <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016d8:	2302      	movs	r3, #2
 80016da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	080020cb 	.word	0x080020cb
 80016ec:	080021a3 	.word	0x080021a3
 80016f0:	080021bf 	.word	0x080021bf

080016f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0b6      	sub	sp, #216	; 0xd8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_ADC_ConfigChannel+0x22>
 8001726:	2302      	movs	r3, #2
 8001728:	e3d5      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x7ce>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fde6 	bl	8001308 <LL_ADC_REG_IsConversionOngoing>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	f040 83ba 	bne.w	8001eb8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b05      	cmp	r3, #5
 800174a:	d824      	bhi.n	8001796 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	3b02      	subs	r3, #2
 8001752:	2b03      	cmp	r3, #3
 8001754:	d81b      	bhi.n	800178e <HAL_ADC_ConfigChannel+0x86>
 8001756:	a201      	add	r2, pc, #4	; (adr r2, 800175c <HAL_ADC_ConfigChannel+0x54>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	0800176d 	.word	0x0800176d
 8001760:	08001775 	.word	0x08001775
 8001764:	0800177d 	.word	0x0800177d
 8001768:	08001785 	.word	0x08001785
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	220c      	movs	r2, #12
 8001770:	605a      	str	r2, [r3, #4]
          break;
 8001772:	e011      	b.n	8001798 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2212      	movs	r2, #18
 8001778:	605a      	str	r2, [r3, #4]
          break;
 800177a:	e00d      	b.n	8001798 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	2218      	movs	r2, #24
 8001780:	605a      	str	r2, [r3, #4]
          break;
 8001782:	e009      	b.n	8001798 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178a:	605a      	str	r2, [r3, #4]
          break;
 800178c:	e004      	b.n	8001798 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2206      	movs	r2, #6
 8001792:	605a      	str	r2, [r3, #4]
          break;
 8001794:	e000      	b.n	8001798 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001796:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6859      	ldr	r1, [r3, #4]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	f7ff fc84 	bl	80010b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fdaa 	bl	8001308 <LL_ADC_REG_IsConversionOngoing>
 80017b4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fdb6 	bl	800132e <LL_ADC_INJ_IsConversionOngoing>
 80017c2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 81c1 	bne.w	8001b52 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f040 81bc 	bne.w	8001b52 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017e2:	d10f      	bne.n	8001804 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2200      	movs	r2, #0
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff fc8b 	bl	800110a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fc32 	bl	8001066 <LL_ADC_SetSamplingTimeCommonConfig>
 8001802:	e00e      	b.n	8001822 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6819      	ldr	r1, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	461a      	mov	r2, r3
 8001812:	f7ff fc7a 	bl	800110a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fc22 	bl	8001066 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	08db      	lsrs	r3, r3, #3
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2b04      	cmp	r3, #4
 8001842:	d00a      	beq.n	800185a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6919      	ldr	r1, [r3, #16]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001854:	f7ff fbb2 	bl	8000fbc <LL_ADC_SetOffset>
 8001858:	e17b      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fbcf 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10a      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x17e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fbc4 	bl	8001004 <LL_ADC_GetOffsetChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	0e9b      	lsrs	r3, r3, #26
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	e01e      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x1bc>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fbb9 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80018b4:	2320      	movs	r3, #32
 80018b6:	e004      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80018b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x1d4>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	0e9b      	lsrs	r3, r3, #26
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	e018      	b.n	800190e <HAL_ADC_ConfigChannel+0x206>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80018f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80018f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001900:	2320      	movs	r3, #32
 8001902:	e004      	b.n	800190e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001904:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800190e:	429a      	cmp	r2, r3
 8001910:	d106      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fb88 	bl	8001030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2101      	movs	r1, #1
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fb6c 	bl	8001004 <LL_ADC_GetOffsetChannel>
 800192c:	4603      	mov	r3, r0
 800192e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10a      	bne.n	800194c <HAL_ADC_ConfigChannel+0x244>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2101      	movs	r1, #1
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fb61 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	0e9b      	lsrs	r3, r3, #26
 8001946:	f003 021f 	and.w	r2, r3, #31
 800194a:	e01e      	b.n	800198a <HAL_ADC_ConfigChannel+0x282>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2101      	movs	r1, #1
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fb56 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001958:	4603      	mov	r3, r0
 800195a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800196a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800196e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001972:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800197a:	2320      	movs	r3, #32
 800197c:	e004      	b.n	8001988 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800197e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001992:	2b00      	cmp	r3, #0
 8001994:	d105      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x29a>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	0e9b      	lsrs	r3, r3, #26
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	e018      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x2cc>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80019b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80019be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80019c6:	2320      	movs	r3, #32
 80019c8:	e004      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80019ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d106      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2200      	movs	r2, #0
 80019de:	2101      	movs	r1, #1
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fb25 	bl	8001030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2102      	movs	r1, #2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fb09 	bl	8001004 <LL_ADC_GetOffsetChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10a      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x30a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2102      	movs	r1, #2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fafe 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	0e9b      	lsrs	r3, r3, #26
 8001a0c:	f003 021f 	and.w	r2, r3, #31
 8001a10:	e01e      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x348>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2102      	movs	r1, #2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff faf3 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a28:	fa93 f3a3 	rbit	r3, r3
 8001a2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001a40:	2320      	movs	r3, #32
 8001a42:	e004      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001a44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x360>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0e9b      	lsrs	r3, r3, #26
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	e016      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x38e>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001a88:	2320      	movs	r3, #32
 8001a8a:	e004      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d106      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fac4 	bl	8001030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2103      	movs	r1, #3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff faa8 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10a      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x3cc>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2103      	movs	r1, #3
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fa9d 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	0e9b      	lsrs	r3, r3, #26
 8001ace:	f003 021f 	and.w	r2, r3, #31
 8001ad2:	e017      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x3fc>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2103      	movs	r1, #3
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fa92 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001aec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001aee:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001af6:	2320      	movs	r3, #32
 8001af8:	e003      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x414>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0e9b      	lsrs	r3, r3, #26
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	e011      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x438>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001b34:	2320      	movs	r3, #32
 8001b36:	e003      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d106      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2103      	movs	r1, #3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fa6f 	bl	8001030 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fb9c 	bl	8001294 <LL_ADC_IsEnabled>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f040 8140 	bne.w	8001de4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	461a      	mov	r2, r3
 8001b72:	f7ff faf5 	bl	8001160 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	4a8f      	ldr	r2, [pc, #572]	; (8001db8 <HAL_ADC_ConfigChannel+0x6b0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	f040 8131 	bne.w	8001de4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10b      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x4a2>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	0e9b      	lsrs	r3, r3, #26
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	2b09      	cmp	r3, #9
 8001ba0:	bf94      	ite	ls
 8001ba2:	2301      	movls	r3, #1
 8001ba4:	2300      	movhi	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	e019      	b.n	8001bde <HAL_ADC_ConfigChannel+0x4d6>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001bb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bba:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e003      	b.n	8001bce <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	2b09      	cmp	r3, #9
 8001bd6:	bf94      	ite	ls
 8001bd8:	2301      	movls	r3, #1
 8001bda:	2300      	movhi	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d079      	beq.n	8001cd6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d107      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x4f6>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	0e9b      	lsrs	r3, r3, #26
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	069b      	lsls	r3, r3, #26
 8001bf8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bfc:	e015      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x522>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c0e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001c16:	2320      	movs	r3, #32
 8001c18:	e003      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	069b      	lsls	r3, r3, #26
 8001c26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x542>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	0e9b      	lsrs	r3, r3, #26
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	2101      	movs	r1, #1
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	e017      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x572>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001c62:	2320      	movs	r3, #32
 8001c64:	e003      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	2101      	movs	r1, #1
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	ea42 0103 	orr.w	r1, r2, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10a      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x598>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	0e9b      	lsrs	r3, r3, #26
 8001c90:	3301      	adds	r3, #1
 8001c92:	f003 021f 	and.w	r2, r3, #31
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	051b      	lsls	r3, r3, #20
 8001c9e:	e018      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x5ca>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	e003      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f003 021f 	and.w	r2, r3, #31
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	e081      	b.n	8001dda <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d107      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x5ea>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	0e9b      	lsrs	r3, r3, #26
 8001ce8:	3301      	adds	r3, #1
 8001cea:	069b      	lsls	r3, r3, #26
 8001cec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf0:	e015      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x616>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	e003      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	069b      	lsls	r3, r3, #26
 8001d1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x636>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0e9b      	lsrs	r3, r3, #26
 8001d30:	3301      	adds	r3, #1
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	e017      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x666>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	61fb      	str	r3, [r7, #28]
  return result;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001d56:	2320      	movs	r3, #32
 8001d58:	e003      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	2101      	movs	r1, #1
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	ea42 0103 	orr.w	r1, r2, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10d      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x692>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	0e9b      	lsrs	r3, r3, #26
 8001d84:	3301      	adds	r3, #1
 8001d86:	f003 021f 	and.w	r2, r3, #31
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	3b1e      	subs	r3, #30
 8001d92:	051b      	lsls	r3, r3, #20
 8001d94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d98:	e01e      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x6d0>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	613b      	str	r3, [r7, #16]
  return result;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d104      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001db2:	2320      	movs	r3, #32
 8001db4:	e006      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x6bc>
 8001db6:	bf00      	nop
 8001db8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f003 021f 	and.w	r2, r3, #31
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b1e      	subs	r3, #30
 8001dd2:	051b      	lsls	r3, r3, #20
 8001dd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	6892      	ldr	r2, [r2, #8]
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7ff f993 	bl	800110a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d06c      	beq.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001df0:	483c      	ldr	r0, [pc, #240]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001df2:	f7ff f8d5 	bl	8000fa0 <LL_ADC_GetCommonPathInternalCh>
 8001df6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a3a      	ldr	r2, [pc, #232]	; (8001ee8 <HAL_ADC_ConfigChannel+0x7e0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d127      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d121      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a35      	ldr	r2, [pc, #212]	; (8001eec <HAL_ADC_ConfigChannel+0x7e4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d157      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e22:	4619      	mov	r1, r3
 8001e24:	482f      	ldr	r0, [pc, #188]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e26:	f7ff f8a8 	bl	8000f7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e2a:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <HAL_ADC_ConfigChannel+0x7e8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	099b      	lsrs	r3, r3, #6
 8001e30:	4a30      	ldr	r2, [pc, #192]	; (8001ef4 <HAL_ADC_ConfigChannel+0x7ec>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	099b      	lsrs	r3, r3, #6
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e44:	e002      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f9      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e52:	e03a      	b.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a27      	ldr	r2, [pc, #156]	; (8001ef8 <HAL_ADC_ConfigChannel+0x7f0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d113      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x77e>
 8001e5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10d      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <HAL_ADC_ConfigChannel+0x7e4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d12a      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4819      	ldr	r0, [pc, #100]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e80:	f7ff f87b 	bl	8000f7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e84:	e021      	b.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <HAL_ADC_ConfigChannel+0x7f4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d11c      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d116      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a12      	ldr	r2, [pc, #72]	; (8001eec <HAL_ADC_ConfigChannel+0x7e4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d111      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ea6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eaa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eae:	4619      	mov	r1, r3
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001eb2:	f7ff f862 	bl	8000f7a <LL_ADC_SetCommonPathInternalCh>
 8001eb6:	e008      	b.n	8001eca <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	f043 0220 	orr.w	r2, r3, #32
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001ed2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	37d8      	adds	r7, #216	; 0xd8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	80080000 	.word	0x80080000
 8001ee4:	50040300 	.word	0x50040300
 8001ee8:	c7520000 	.word	0xc7520000
 8001eec:	50040000 	.word	0x50040000
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	053e2d63 	.word	0x053e2d63
 8001ef8:	cb840000 	.word	0xcb840000
 8001efc:	80000001 	.word	0x80000001

08001f00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff f9bf 	bl	8001294 <LL_ADC_IsEnabled>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d169      	bne.n	8001ff0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <ADC_Enable+0xfc>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00d      	beq.n	8001f46 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f043 0210 	orr.w	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	f043 0201 	orr.w	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e055      	b.n	8001ff2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff f97a 	bl	8001244 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f50:	482b      	ldr	r0, [pc, #172]	; (8002000 <ADC_Enable+0x100>)
 8001f52:	f7ff f825 	bl	8000fa0 <LL_ADC_GetCommonPathInternalCh>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f60:	4b28      	ldr	r3, [pc, #160]	; (8002004 <ADC_Enable+0x104>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	4a28      	ldr	r2, [pc, #160]	; (8002008 <ADC_Enable+0x108>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	099b      	lsrs	r3, r3, #6
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001f7a:	e002      	b.n	8001f82 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f9      	bne.n	8001f7c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f88:	f7fe ffb4 	bl	8000ef4 <HAL_GetTick>
 8001f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f8e:	e028      	b.n	8001fe2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff f97d 	bl	8001294 <LL_ADC_IsEnabled>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d104      	bne.n	8001faa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f94d 	bl	8001244 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001faa:	f7fe ffa3 	bl	8000ef4 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d914      	bls.n	8001fe2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d00d      	beq.n	8001fe2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f043 0210 	orr.w	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e007      	b.n	8001ff2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d1cf      	bne.n	8001f90 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	8000003f 	.word	0x8000003f
 8002000:	50040300 	.word	0x50040300
 8002004:	20000000 	.word	0x20000000
 8002008:	053e2d63 	.word	0x053e2d63

0800200c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff f94e 	bl	80012ba <LL_ADC_IsDisableOngoing>
 800201e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff f935 	bl	8001294 <LL_ADC_IsEnabled>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d047      	beq.n	80020c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d144      	bne.n	80020c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 030d 	and.w	r3, r3, #13
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10c      	bne.n	800205e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff f90f 	bl	800126c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2203      	movs	r2, #3
 8002054:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002056:	f7fe ff4d 	bl	8000ef4 <HAL_GetTick>
 800205a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800205c:	e029      	b.n	80020b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f043 0210 	orr.w	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e023      	b.n	80020c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800207a:	f7fe ff3b 	bl	8000ef4 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d914      	bls.n	80020b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00d      	beq.n	80020b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f043 0210 	orr.w	r2, r3, #16
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	f043 0201 	orr.w	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e007      	b.n	80020c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1dc      	bne.n	800207a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d14b      	bne.n	800217c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d021      	beq.n	8002142 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe ffc2 	bl	800108c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d032      	beq.n	8002174 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d12b      	bne.n	8002174 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d11f      	bne.n	8002174 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	659a      	str	r2, [r3, #88]	; 0x58
 8002140:	e018      	b.n	8002174 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d111      	bne.n	8002174 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f7fe fc0d 	bl	8000994 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800217a:	e00e      	b.n	800219a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7ff fab3 	bl	80016f4 <HAL_ADC_ErrorCallback>
}
 800218e:	e004      	b.n	800219a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4798      	blx	r3
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f7fe fbdf 	bl	8000974 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	f043 0204 	orr.w	r2, r3, #4
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f7ff fa85 	bl	80016f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <LL_ADC_StartCalibration>:
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002204:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800220e:	4313      	orrs	r3, r2
 8002210:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	609a      	str	r2, [r3, #8]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_IsCalibrationOnGoing>:
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002238:	d101      	bne.n	800223e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_ADCEx_Calibration_Start+0x1c>
 8002264:	2302      	movs	r3, #2
 8002266:	e04d      	b.n	8002304 <HAL_ADCEx_Calibration_Start+0xb8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff fecb 	bl	800200c <ADC_Disable>
 8002276:	4603      	mov	r3, r0
 8002278:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d136      	bne.n	80022ee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002284:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002288:	f023 0302 	bic.w	r3, r3, #2
 800228c:	f043 0202 	orr.w	r2, r3, #2
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6839      	ldr	r1, [r7, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ffa9 	bl	80021f2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022a0:	e014      	b.n	80022cc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	3301      	adds	r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80022ae:	d30d      	bcc.n	80022cc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	f023 0312 	bic.w	r3, r3, #18
 80022b8:	f043 0210 	orr.w	r2, r3, #16
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e01b      	b.n	8002304 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ffa7 	bl	8002224 <LL_ADC_IsCalibrationOnGoing>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e2      	bne.n	80022a2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	f023 0303 	bic.w	r3, r3, #3
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	659a      	str	r2, [r3, #88]	; 0x58
 80022ec:	e005      	b.n	80022fa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	f043 0210 	orr.w	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002302:	7bfb      	ldrb	r3, [r7, #15]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <__NVIC_SetPriorityGrouping+0x44>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002328:	4013      	ands	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800233c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233e:	4a04      	ldr	r2, [pc, #16]	; (8002350 <__NVIC_SetPriorityGrouping+0x44>)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	60d3      	str	r3, [r2, #12]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002358:	4b04      	ldr	r3, [pc, #16]	; (800236c <__NVIC_GetPriorityGrouping+0x18>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	0a1b      	lsrs	r3, r3, #8
 800235e:	f003 0307 	and.w	r3, r3, #7
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	2b00      	cmp	r3, #0
 8002380:	db0b      	blt.n	800239a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f003 021f 	and.w	r2, r3, #31
 8002388:	4907      	ldr	r1, [pc, #28]	; (80023a8 <__NVIC_EnableIRQ+0x38>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	2001      	movs	r0, #1
 8002392:	fa00 f202 	lsl.w	r2, r0, r2
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000e100 	.word	0xe000e100

080023ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	db0a      	blt.n	80023d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	490c      	ldr	r1, [pc, #48]	; (80023f8 <__NVIC_SetPriority+0x4c>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	0112      	lsls	r2, r2, #4
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	440b      	add	r3, r1
 80023d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d4:	e00a      	b.n	80023ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4908      	ldr	r1, [pc, #32]	; (80023fc <__NVIC_SetPriority+0x50>)
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	3b04      	subs	r3, #4
 80023e4:	0112      	lsls	r2, r2, #4
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	440b      	add	r3, r1
 80023ea:	761a      	strb	r2, [r3, #24]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000e100 	.word	0xe000e100
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f1c3 0307 	rsb	r3, r3, #7
 800241a:	2b04      	cmp	r3, #4
 800241c:	bf28      	it	cs
 800241e:	2304      	movcs	r3, #4
 8002420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3304      	adds	r3, #4
 8002426:	2b06      	cmp	r3, #6
 8002428:	d902      	bls.n	8002430 <NVIC_EncodePriority+0x30>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3b03      	subs	r3, #3
 800242e:	e000      	b.n	8002432 <NVIC_EncodePriority+0x32>
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	401a      	ands	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002448:	f04f 31ff 	mov.w	r1, #4294967295
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43d9      	mvns	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	4313      	orrs	r3, r2
         );
}
 800245a:	4618      	mov	r0, r3
 800245c:	3724      	adds	r7, #36	; 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002478:	d301      	bcc.n	800247e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247a:	2301      	movs	r3, #1
 800247c:	e00f      	b.n	800249e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247e:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <SysTick_Config+0x40>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002486:	210f      	movs	r1, #15
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	f7ff ff8e 	bl	80023ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <SysTick_Config+0x40>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002496:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <SysTick_Config+0x40>)
 8002498:	2207      	movs	r2, #7
 800249a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	e000e010 	.word	0xe000e010

080024ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff29 	bl	800230c <__NVIC_SetPriorityGrouping>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024d4:	f7ff ff3e 	bl	8002354 <__NVIC_GetPriorityGrouping>
 80024d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	6978      	ldr	r0, [r7, #20]
 80024e0:	f7ff ff8e 	bl	8002400 <NVIC_EncodePriority>
 80024e4:	4602      	mov	r2, r0
 80024e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff5d 	bl	80023ac <__NVIC_SetPriority>
}
 80024f2:	bf00      	nop
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff31 	bl	8002370 <__NVIC_EnableIRQ>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ffa2 	bl	8002468 <SysTick_Config>
 8002524:	4603      	mov	r3, r0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e098      	b.n	8002674 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	4b4d      	ldr	r3, [pc, #308]	; (8002680 <HAL_DMA_Init+0x150>)
 800254a:	429a      	cmp	r2, r3
 800254c:	d80f      	bhi.n	800256e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	4b4b      	ldr	r3, [pc, #300]	; (8002684 <HAL_DMA_Init+0x154>)
 8002556:	4413      	add	r3, r2
 8002558:	4a4b      	ldr	r2, [pc, #300]	; (8002688 <HAL_DMA_Init+0x158>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	009a      	lsls	r2, r3, #2
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a48      	ldr	r2, [pc, #288]	; (800268c <HAL_DMA_Init+0x15c>)
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
 800256c:	e00e      	b.n	800258c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	4b46      	ldr	r3, [pc, #280]	; (8002690 <HAL_DMA_Init+0x160>)
 8002576:	4413      	add	r3, r2
 8002578:	4a43      	ldr	r2, [pc, #268]	; (8002688 <HAL_DMA_Init+0x158>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	009a      	lsls	r2, r3, #2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a42      	ldr	r2, [pc, #264]	; (8002694 <HAL_DMA_Init+0x164>)
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80025a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025e6:	d039      	beq.n	800265c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	4a27      	ldr	r2, [pc, #156]	; (800268c <HAL_DMA_Init+0x15c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d11a      	bne.n	8002628 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025f2:	4b29      	ldr	r3, [pc, #164]	; (8002698 <HAL_DMA_Init+0x168>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f003 031c 	and.w	r3, r3, #28
 80025fe:	210f      	movs	r1, #15
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	4924      	ldr	r1, [pc, #144]	; (8002698 <HAL_DMA_Init+0x168>)
 8002608:	4013      	ands	r3, r2
 800260a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800260c:	4b22      	ldr	r3, [pc, #136]	; (8002698 <HAL_DMA_Init+0x168>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	f003 031c 	and.w	r3, r3, #28
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	491d      	ldr	r1, [pc, #116]	; (8002698 <HAL_DMA_Init+0x168>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
 8002626:	e019      	b.n	800265c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002628:	4b1c      	ldr	r3, [pc, #112]	; (800269c <HAL_DMA_Init+0x16c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	f003 031c 	and.w	r3, r3, #28
 8002634:	210f      	movs	r1, #15
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	4917      	ldr	r1, [pc, #92]	; (800269c <HAL_DMA_Init+0x16c>)
 800263e:	4013      	ands	r3, r2
 8002640:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_DMA_Init+0x16c>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6859      	ldr	r1, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f003 031c 	and.w	r3, r3, #28
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	4911      	ldr	r1, [pc, #68]	; (800269c <HAL_DMA_Init+0x16c>)
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40020407 	.word	0x40020407
 8002684:	bffdfff8 	.word	0xbffdfff8
 8002688:	cccccccd 	.word	0xcccccccd
 800268c:	40020000 	.word	0x40020000
 8002690:	bffdfbf8 	.word	0xbffdfbf8
 8002694:	40020400 	.word	0x40020400
 8002698:	400200a8 	.word	0x400200a8
 800269c:	400204a8 	.word	0x400204a8

080026a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_DMA_Start_IT+0x20>
 80026bc:	2302      	movs	r3, #2
 80026be:	e04b      	b.n	8002758 <HAL_DMA_Start_IT+0xb8>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d13a      	bne.n	800274a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f8e0 	bl	80028be <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 020e 	orr.w	r2, r2, #14
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e00f      	b.n	8002738 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 020a 	orr.w	r2, r2, #10
 8002736:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e005      	b.n	8002756 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002752:	2302      	movs	r3, #2
 8002754:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002756:	7dfb      	ldrb	r3, [r7, #23]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	f003 031c 	and.w	r3, r3, #28
 8002780:	2204      	movs	r2, #4
 8002782:	409a      	lsls	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d026      	beq.n	80027da <HAL_DMA_IRQHandler+0x7a>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b00      	cmp	r3, #0
 8002794:	d021      	beq.n	80027da <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d107      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0204 	bic.w	r2, r2, #4
 80027b2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	f003 021c 	and.w	r2, r3, #28
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	2104      	movs	r1, #4
 80027c2:	fa01 f202 	lsl.w	r2, r1, r2
 80027c6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d071      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80027d8:	e06c      	b.n	80028b4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f003 031c 	and.w	r3, r3, #28
 80027e2:	2202      	movs	r2, #2
 80027e4:	409a      	lsls	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d02e      	beq.n	800284c <HAL_DMA_IRQHandler+0xec>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d029      	beq.n	800284c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10b      	bne.n	800281e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 020a 	bic.w	r2, r2, #10
 8002814:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f003 021c 	and.w	r2, r3, #28
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	2102      	movs	r1, #2
 800282c:	fa01 f202 	lsl.w	r2, r1, r2
 8002830:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d038      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800284a:	e033      	b.n	80028b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002850:	f003 031c 	and.w	r3, r3, #28
 8002854:	2208      	movs	r2, #8
 8002856:	409a      	lsls	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d02a      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x156>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d025      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 020e 	bic.w	r2, r2, #14
 8002878:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f003 021c 	and.w	r2, r3, #28
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f202 	lsl.w	r2, r1, r2
 800288c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d004      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop

}
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f003 021c 	and.w	r2, r3, #28
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	2101      	movs	r1, #1
 80028da:	fa01 f202 	lsl.w	r2, r1, r2
 80028de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	d108      	bne.n	8002902 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002900:	e007      	b.n	8002912 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	60da      	str	r2, [r3, #12]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292e:	e154      	b.n	8002bda <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8146 	beq.w	8002bd4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d005      	beq.n	8002960 <HAL_GPIO_Init+0x40>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d130      	bne.n	80029c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002996:	2201      	movs	r2, #1
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 0201 	and.w	r2, r3, #1
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d017      	beq.n	80029fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2203      	movs	r2, #3
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d123      	bne.n	8002a52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	08da      	lsrs	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3208      	adds	r2, #8
 8002a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	220f      	movs	r2, #15
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	6939      	ldr	r1, [r7, #16]
 8002a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0203 	and.w	r2, r3, #3
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80a0 	beq.w	8002bd4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a94:	4b58      	ldr	r3, [pc, #352]	; (8002bf8 <HAL_GPIO_Init+0x2d8>)
 8002a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a98:	4a57      	ldr	r2, [pc, #348]	; (8002bf8 <HAL_GPIO_Init+0x2d8>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6613      	str	r3, [r2, #96]	; 0x60
 8002aa0:	4b55      	ldr	r3, [pc, #340]	; (8002bf8 <HAL_GPIO_Init+0x2d8>)
 8002aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002aac:	4a53      	ldr	r2, [pc, #332]	; (8002bfc <HAL_GPIO_Init+0x2dc>)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ad6:	d019      	beq.n	8002b0c <HAL_GPIO_Init+0x1ec>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a49      	ldr	r2, [pc, #292]	; (8002c00 <HAL_GPIO_Init+0x2e0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <HAL_GPIO_Init+0x1e8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a48      	ldr	r2, [pc, #288]	; (8002c04 <HAL_GPIO_Init+0x2e4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d00d      	beq.n	8002b04 <HAL_GPIO_Init+0x1e4>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a47      	ldr	r2, [pc, #284]	; (8002c08 <HAL_GPIO_Init+0x2e8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d007      	beq.n	8002b00 <HAL_GPIO_Init+0x1e0>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a46      	ldr	r2, [pc, #280]	; (8002c0c <HAL_GPIO_Init+0x2ec>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d101      	bne.n	8002afc <HAL_GPIO_Init+0x1dc>
 8002af8:	2304      	movs	r3, #4
 8002afa:	e008      	b.n	8002b0e <HAL_GPIO_Init+0x1ee>
 8002afc:	2307      	movs	r3, #7
 8002afe:	e006      	b.n	8002b0e <HAL_GPIO_Init+0x1ee>
 8002b00:	2303      	movs	r3, #3
 8002b02:	e004      	b.n	8002b0e <HAL_GPIO_Init+0x1ee>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e002      	b.n	8002b0e <HAL_GPIO_Init+0x1ee>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <HAL_GPIO_Init+0x1ee>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	f002 0203 	and.w	r2, r2, #3
 8002b14:	0092      	lsls	r2, r2, #2
 8002b16:	4093      	lsls	r3, r2
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b1e:	4937      	ldr	r1, [pc, #220]	; (8002bfc <HAL_GPIO_Init+0x2dc>)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	3302      	adds	r3, #2
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b2c:	4b38      	ldr	r3, [pc, #224]	; (8002c10 <HAL_GPIO_Init+0x2f0>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b50:	4a2f      	ldr	r2, [pc, #188]	; (8002c10 <HAL_GPIO_Init+0x2f0>)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b56:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <HAL_GPIO_Init+0x2f0>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b7a:	4a25      	ldr	r2, [pc, #148]	; (8002c10 <HAL_GPIO_Init+0x2f0>)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b80:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <HAL_GPIO_Init+0x2f0>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ba4:	4a1a      	ldr	r2, [pc, #104]	; (8002c10 <HAL_GPIO_Init+0x2f0>)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002baa:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_GPIO_Init+0x2f0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bce:	4a10      	ldr	r2, [pc, #64]	; (8002c10 <HAL_GPIO_Init+0x2f0>)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f47f aea3 	bne.w	8002930 <HAL_GPIO_Init+0x10>
  }
}
 8002bea:	bf00      	nop
 8002bec:	bf00      	nop
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40010000 	.word	0x40010000
 8002c00:	48000400 	.word	0x48000400
 8002c04:	48000800 	.word	0x48000800
 8002c08:	48000c00 	.word	0x48000c00
 8002c0c:	48001000 	.word	0x48001000
 8002c10:	40010400 	.word	0x40010400

08002c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	807b      	strh	r3, [r7, #2]
 8002c20:	4613      	mov	r3, r2
 8002c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c24:	787b      	ldrb	r3, [r7, #1]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c30:	e002      	b.n	8002c38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c32:	887a      	ldrh	r2, [r7, #2]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	041a      	lsls	r2, r3, #16
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	43d9      	mvns	r1, r3
 8002c62:	887b      	ldrh	r3, [r7, #2]
 8002c64:	400b      	ands	r3, r1
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c7c:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40007000 	.word	0x40007000

08002c94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca2:	d130      	bne.n	8002d06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ca4:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb0:	d038      	beq.n	8002d24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cb2:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cba:	4a1e      	ldr	r2, [pc, #120]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2232      	movs	r2, #50	; 0x32
 8002cc8:	fb02 f303 	mul.w	r3, r2, r3
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0c9b      	lsrs	r3, r3, #18
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cd8:	e002      	b.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cec:	d102      	bne.n	8002cf4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f2      	bne.n	8002cda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d00:	d110      	bne.n	8002d24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e00f      	b.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d12:	d007      	beq.n	8002d24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d1c:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40007000 	.word	0x40007000
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	431bde83 	.word	0x431bde83

08002d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f000 bc02 	b.w	8003558 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d54:	4b96      	ldr	r3, [pc, #600]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d5e:	4b94      	ldr	r3, [pc, #592]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80e4 	beq.w	8002f3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <HAL_RCC_OscConfig+0x4c>
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	f040 808b 	bne.w	8002e9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	f040 8087 	bne.w	8002e9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d8c:	4b88      	ldr	r3, [pc, #544]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_OscConfig+0x64>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e3d9      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1a      	ldr	r2, [r3, #32]
 8002da8:	4b81      	ldr	r3, [pc, #516]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <HAL_RCC_OscConfig+0x7e>
 8002db4:	4b7e      	ldr	r3, [pc, #504]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dbc:	e005      	b.n	8002dca <HAL_RCC_OscConfig+0x8a>
 8002dbe:	4b7c      	ldr	r3, [pc, #496]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d223      	bcs.n	8002e16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fd8c 	bl	80038f0 <RCC_SetFlashLatencyFromMSIRange>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e3ba      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de2:	4b73      	ldr	r3, [pc, #460]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a72      	ldr	r2, [pc, #456]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002de8:	f043 0308 	orr.w	r3, r3, #8
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b70      	ldr	r3, [pc, #448]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	496d      	ldr	r1, [pc, #436]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e00:	4b6b      	ldr	r3, [pc, #428]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	4968      	ldr	r1, [pc, #416]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
 8002e14:	e025      	b.n	8002e62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e16:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a65      	ldr	r2, [pc, #404]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002e1c:	f043 0308 	orr.w	r3, r3, #8
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	4b63      	ldr	r3, [pc, #396]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4960      	ldr	r1, [pc, #384]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e34:	4b5e      	ldr	r3, [pc, #376]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	495b      	ldr	r1, [pc, #364]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fd4c 	bl	80038f0 <RCC_SetFlashLatencyFromMSIRange>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e37a      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e62:	f000 fc81 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b51      	ldr	r3, [pc, #324]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	4950      	ldr	r1, [pc, #320]	; (8002fb4 <HAL_RCC_OscConfig+0x274>)
 8002e74:	5ccb      	ldrb	r3, [r1, r3]
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	4a4e      	ldr	r2, [pc, #312]	; (8002fb8 <HAL_RCC_OscConfig+0x278>)
 8002e80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e82:	4b4e      	ldr	r3, [pc, #312]	; (8002fbc <HAL_RCC_OscConfig+0x27c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd ffe4 	bl	8000e54 <HAL_InitTick>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d052      	beq.n	8002f3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	e35e      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d032      	beq.n	8002f08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ea2:	4b43      	ldr	r3, [pc, #268]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a42      	ldr	r2, [pc, #264]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eae:	f7fe f821 	bl	8000ef4 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eb6:	f7fe f81d 	bl	8000ef4 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e347      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ec8:	4b39      	ldr	r3, [pc, #228]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed4:	4b36      	ldr	r3, [pc, #216]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a35      	ldr	r2, [pc, #212]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002eda:	f043 0308 	orr.w	r3, r3, #8
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4930      	ldr	r1, [pc, #192]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef2:	4b2f      	ldr	r3, [pc, #188]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	492b      	ldr	r1, [pc, #172]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
 8002f06:	e01a      	b.n	8002f3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f08:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f14:	f7fd ffee 	bl	8000ef4 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f1c:	f7fd ffea 	bl	8000ef4 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e314      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x1dc>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d073      	beq.n	8003032 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_OscConfig+0x21c>
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	2b0c      	cmp	r3, #12
 8002f54:	d10e      	bne.n	8002f74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d10b      	bne.n	8002f74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d063      	beq.n	8003030 <HAL_RCC_OscConfig+0x2f0>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d15f      	bne.n	8003030 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e2f1      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7c:	d106      	bne.n	8002f8c <HAL_RCC_OscConfig+0x24c>
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a0b      	ldr	r2, [pc, #44]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e025      	b.n	8002fd8 <HAL_RCC_OscConfig+0x298>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f94:	d114      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x280>
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a02      	ldr	r2, [pc, #8]	; (8002fb0 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e013      	b.n	8002fd8 <HAL_RCC_OscConfig+0x298>
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	08005b44 	.word	0x08005b44
 8002fb8:	20000000 	.word	0x20000000
 8002fbc:	20000004 	.word	0x20000004
 8002fc0:	4ba0      	ldr	r3, [pc, #640]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a9f      	ldr	r2, [pc, #636]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b9d      	ldr	r3, [pc, #628]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a9c      	ldr	r2, [pc, #624]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8002fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fd ff88 	bl	8000ef4 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fd ff84 	bl	8000ef4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e2ae      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffa:	4b92      	ldr	r3, [pc, #584]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x2a8>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fd ff74 	bl	8000ef4 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fd ff70 	bl	8000ef4 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e29a      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003022:	4b88      	ldr	r3, [pc, #544]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x2d0>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d060      	beq.n	8003100 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d005      	beq.n	8003050 <HAL_RCC_OscConfig+0x310>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d119      	bne.n	800307e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d116      	bne.n	800307e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003050:	4b7c      	ldr	r3, [pc, #496]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_OscConfig+0x328>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e277      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003068:	4b76      	ldr	r3, [pc, #472]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	061b      	lsls	r3, r3, #24
 8003076:	4973      	ldr	r1, [pc, #460]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800307c:	e040      	b.n	8003100 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d023      	beq.n	80030ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003086:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6e      	ldr	r2, [pc, #440]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 800308c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003092:	f7fd ff2f 	bl	8000ef4 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309a:	f7fd ff2b 	bl	8000ef4 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e255      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ac:	4b65      	ldr	r3, [pc, #404]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b8:	4b62      	ldr	r3, [pc, #392]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	495f      	ldr	r1, [pc, #380]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
 80030cc:	e018      	b.n	8003100 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ce:	4b5d      	ldr	r3, [pc, #372]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a5c      	ldr	r2, [pc, #368]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 80030d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030da:	f7fd ff0b 	bl	8000ef4 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e2:	f7fd ff07 	bl	8000ef4 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e231      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f4:	4b53      	ldr	r3, [pc, #332]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d03c      	beq.n	8003186 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01c      	beq.n	800314e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003114:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8003116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311a:	4a4a      	ldr	r2, [pc, #296]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fd fee6 	bl	8000ef4 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312c:	f7fd fee2 	bl	8000ef4 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e20c      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800313e:	4b41      	ldr	r3, [pc, #260]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8003140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0ef      	beq.n	800312c <HAL_RCC_OscConfig+0x3ec>
 800314c:	e01b      	b.n	8003186 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314e:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8003150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003154:	4a3b      	ldr	r2, [pc, #236]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8003156:	f023 0301 	bic.w	r3, r3, #1
 800315a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315e:	f7fd fec9 	bl	8000ef4 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003166:	f7fd fec5 	bl	8000ef4 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e1ef      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003178:	4b32      	ldr	r3, [pc, #200]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 800317a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1ef      	bne.n	8003166 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80a6 	beq.w	80032e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003194:	2300      	movs	r3, #0
 8003196:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003198:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10d      	bne.n	80031c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a4:	4b27      	ldr	r3, [pc, #156]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 80031a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a8:	4a26      	ldr	r2, [pc, #152]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 80031aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ae:	6593      	str	r3, [r2, #88]	; 0x58
 80031b0:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031bc:	2301      	movs	r3, #1
 80031be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c0:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_RCC_OscConfig+0x508>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d118      	bne.n	80031fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031cc:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <HAL_RCC_OscConfig+0x508>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <HAL_RCC_OscConfig+0x508>)
 80031d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d8:	f7fd fe8c 	bl	8000ef4 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e0:	f7fd fe88 	bl	8000ef4 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e1b2      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f2:	4b15      	ldr	r3, [pc, #84]	; (8003248 <HAL_RCC_OscConfig+0x508>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d108      	bne.n	8003218 <HAL_RCC_OscConfig+0x4d8>
 8003206:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320c:	4a0d      	ldr	r2, [pc, #52]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003216:	e029      	b.n	800326c <HAL_RCC_OscConfig+0x52c>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b05      	cmp	r3, #5
 800321e:	d115      	bne.n	800324c <HAL_RCC_OscConfig+0x50c>
 8003220:	4b08      	ldr	r3, [pc, #32]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	4a07      	ldr	r2, [pc, #28]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8003228:	f043 0304 	orr.w	r3, r3, #4
 800322c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	4a03      	ldr	r2, [pc, #12]	; (8003244 <HAL_RCC_OscConfig+0x504>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003240:	e014      	b.n	800326c <HAL_RCC_OscConfig+0x52c>
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	40007000 	.word	0x40007000
 800324c:	4b9a      	ldr	r3, [pc, #616]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	4a99      	ldr	r2, [pc, #612]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800325c:	4b96      	ldr	r3, [pc, #600]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	4a95      	ldr	r2, [pc, #596]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 8003264:	f023 0304 	bic.w	r3, r3, #4
 8003268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d016      	beq.n	80032a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003274:	f7fd fe3e 	bl	8000ef4 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327a:	e00a      	b.n	8003292 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327c:	f7fd fe3a 	bl	8000ef4 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	; 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e162      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003292:	4b89      	ldr	r3, [pc, #548]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ed      	beq.n	800327c <HAL_RCC_OscConfig+0x53c>
 80032a0:	e015      	b.n	80032ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fd fe27 	bl	8000ef4 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7fd fe23 	bl	8000ef4 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e14b      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032c0:	4b7d      	ldr	r3, [pc, #500]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1ed      	bne.n	80032aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ce:	7ffb      	ldrb	r3, [r7, #31]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d105      	bne.n	80032e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d4:	4b78      	ldr	r3, [pc, #480]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	4a77      	ldr	r2, [pc, #476]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 80032da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d03c      	beq.n	8003366 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01c      	beq.n	800332e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032f4:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 80032f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032fa:	4a6f      	ldr	r2, [pc, #444]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fd fdf6 	bl	8000ef4 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800330c:	f7fd fdf2 	bl	8000ef4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e11c      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800331e:	4b66      	ldr	r3, [pc, #408]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 8003320:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ef      	beq.n	800330c <HAL_RCC_OscConfig+0x5cc>
 800332c:	e01b      	b.n	8003366 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800332e:	4b62      	ldr	r3, [pc, #392]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 8003330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003334:	4a60      	ldr	r2, [pc, #384]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7fd fdd9 	bl	8000ef4 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003346:	f7fd fdd5 	bl	8000ef4 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0ff      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003358:	4b57      	ldr	r3, [pc, #348]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 800335a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1ef      	bne.n	8003346 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 80f3 	beq.w	8003556 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	2b02      	cmp	r3, #2
 8003376:	f040 80c9 	bne.w	800350c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800337a:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f003 0203 	and.w	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	429a      	cmp	r2, r3
 800338c:	d12c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	3b01      	subs	r3, #1
 800339a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800339c:	429a      	cmp	r2, r3
 800339e:	d123      	bne.n	80033e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d11b      	bne.n	80033e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d113      	bne.n	80033e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	085b      	lsrs	r3, r3, #1
 80033cc:	3b01      	subs	r3, #1
 80033ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d109      	bne.n	80033e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	3b01      	subs	r3, #1
 80033e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d06b      	beq.n	80034c0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b0c      	cmp	r3, #12
 80033ec:	d062      	beq.n	80034b4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033ee:	4b32      	ldr	r3, [pc, #200]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0ac      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033fe:	4b2e      	ldr	r3, [pc, #184]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2d      	ldr	r2, [pc, #180]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 8003404:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003408:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800340a:	f7fd fd73 	bl	8000ef4 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003412:	f7fd fd6f 	bl	8000ef4 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e099      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003430:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	4b21      	ldr	r3, [pc, #132]	; (80034bc <HAL_RCC_OscConfig+0x77c>)
 8003436:	4013      	ands	r3, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003440:	3a01      	subs	r2, #1
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	4311      	orrs	r1, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800344a:	0212      	lsls	r2, r2, #8
 800344c:	4311      	orrs	r1, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003452:	0852      	lsrs	r2, r2, #1
 8003454:	3a01      	subs	r2, #1
 8003456:	0552      	lsls	r2, r2, #21
 8003458:	4311      	orrs	r1, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800345e:	0852      	lsrs	r2, r2, #1
 8003460:	3a01      	subs	r2, #1
 8003462:	0652      	lsls	r2, r2, #25
 8003464:	4311      	orrs	r1, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800346a:	06d2      	lsls	r2, r2, #27
 800346c:	430a      	orrs	r2, r1
 800346e:	4912      	ldr	r1, [pc, #72]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 8003470:	4313      	orrs	r3, r2
 8003472:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003474:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 800347a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003480:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4a0c      	ldr	r2, [pc, #48]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 8003486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800348a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800348c:	f7fd fd32 	bl	8000ef4 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fd fd2e 	bl	8000ef4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e058      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_RCC_OscConfig+0x778>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034b2:	e050      	b.n	8003556 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e04f      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
 80034b8:	40021000 	.word	0x40021000
 80034bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c0:	4b27      	ldr	r3, [pc, #156]	; (8003560 <HAL_RCC_OscConfig+0x820>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d144      	bne.n	8003556 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034cc:	4b24      	ldr	r3, [pc, #144]	; (8003560 <HAL_RCC_OscConfig+0x820>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a23      	ldr	r2, [pc, #140]	; (8003560 <HAL_RCC_OscConfig+0x820>)
 80034d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034d8:	4b21      	ldr	r3, [pc, #132]	; (8003560 <HAL_RCC_OscConfig+0x820>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a20      	ldr	r2, [pc, #128]	; (8003560 <HAL_RCC_OscConfig+0x820>)
 80034de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034e4:	f7fd fd06 	bl	8000ef4 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fd fd02 	bl	8000ef4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e02c      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fe:	4b18      	ldr	r3, [pc, #96]	; (8003560 <HAL_RCC_OscConfig+0x820>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x7ac>
 800350a:	e024      	b.n	8003556 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b0c      	cmp	r3, #12
 8003510:	d01f      	beq.n	8003552 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b13      	ldr	r3, [pc, #76]	; (8003560 <HAL_RCC_OscConfig+0x820>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a12      	ldr	r2, [pc, #72]	; (8003560 <HAL_RCC_OscConfig+0x820>)
 8003518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800351c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fd fce9 	bl	8000ef4 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003526:	f7fd fce5 	bl	8000ef4 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e00f      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003538:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_RCC_OscConfig+0x820>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f0      	bne.n	8003526 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_OscConfig+0x820>)
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	4905      	ldr	r1, [pc, #20]	; (8003560 <HAL_RCC_OscConfig+0x820>)
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_RCC_OscConfig+0x824>)
 800354c:	4013      	ands	r3, r2
 800354e:	60cb      	str	r3, [r1, #12]
 8003550:	e001      	b.n	8003556 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3720      	adds	r7, #32
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	feeefffc 	.word	0xfeeefffc

08003568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0e7      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800357c:	4b75      	ldr	r3, [pc, #468]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d910      	bls.n	80035ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b72      	ldr	r3, [pc, #456]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 0207 	bic.w	r2, r3, #7
 8003592:	4970      	ldr	r1, [pc, #448]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b6e      	ldr	r3, [pc, #440]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0cf      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d010      	beq.n	80035da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	4b66      	ldr	r3, [pc, #408]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d908      	bls.n	80035da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c8:	4b63      	ldr	r3, [pc, #396]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4960      	ldr	r1, [pc, #384]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d04c      	beq.n	8003680 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ee:	4b5a      	ldr	r3, [pc, #360]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d121      	bne.n	800363e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0a6      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003606:	4b54      	ldr	r3, [pc, #336]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d115      	bne.n	800363e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e09a      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800361e:	4b4e      	ldr	r3, [pc, #312]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e08e      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800362e:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e086      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800363e:	4b46      	ldr	r3, [pc, #280]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f023 0203 	bic.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	4943      	ldr	r1, [pc, #268]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 800364c:	4313      	orrs	r3, r2
 800364e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003650:	f7fd fc50 	bl	8000ef4 <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	e00a      	b.n	800366e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003658:	f7fd fc4c 	bl	8000ef4 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e06e      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	4b3a      	ldr	r3, [pc, #232]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 020c 	and.w	r2, r3, #12
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	429a      	cmp	r2, r3
 800367e:	d1eb      	bne.n	8003658 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d010      	beq.n	80036ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	4b31      	ldr	r3, [pc, #196]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003698:	429a      	cmp	r2, r3
 800369a:	d208      	bcs.n	80036ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369c:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	492b      	ldr	r1, [pc, #172]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ae:	4b29      	ldr	r3, [pc, #164]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d210      	bcs.n	80036de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036bc:	4b25      	ldr	r3, [pc, #148]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 0207 	bic.w	r2, r3, #7
 80036c4:	4923      	ldr	r1, [pc, #140]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036cc:	4b21      	ldr	r3, [pc, #132]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d001      	beq.n	80036de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e036      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d008      	beq.n	80036fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ea:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	4918      	ldr	r1, [pc, #96]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d009      	beq.n	800371c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003708:	4b13      	ldr	r3, [pc, #76]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4910      	ldr	r1, [pc, #64]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800371c:	f000 f824 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	490b      	ldr	r1, [pc, #44]	; (800375c <HAL_RCC_ClockConfig+0x1f4>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 800373a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_ClockConfig+0x1fc>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7fd fb87 	bl	8000e54 <HAL_InitTick>
 8003746:	4603      	mov	r3, r0
 8003748:	72fb      	strb	r3, [r7, #11]

  return status;
 800374a:	7afb      	ldrb	r3, [r7, #11]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40022000 	.word	0x40022000
 8003758:	40021000 	.word	0x40021000
 800375c:	08005b44 	.word	0x08005b44
 8003760:	20000000 	.word	0x20000000
 8003764:	20000004 	.word	0x20000004

08003768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003768:	b480      	push	{r7}
 800376a:	b089      	sub	sp, #36	; 0x24
 800376c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003776:	4b3e      	ldr	r3, [pc, #248]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003780:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x34>
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b0c      	cmp	r3, #12
 8003794:	d121      	bne.n	80037da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d11e      	bne.n	80037da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800379c:	4b34      	ldr	r3, [pc, #208]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037a8:	4b31      	ldr	r3, [pc, #196]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 80037aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ae:	0a1b      	lsrs	r3, r3, #8
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	e005      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037b8:	4b2d      	ldr	r3, [pc, #180]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037c4:	4a2b      	ldr	r2, [pc, #172]	; (8003874 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10d      	bne.n	80037f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d102      	bne.n	80037e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037e0:	4b25      	ldr	r3, [pc, #148]	; (8003878 <HAL_RCC_GetSysClockFreq+0x110>)
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	e004      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037ec:	4b23      	ldr	r3, [pc, #140]	; (800387c <HAL_RCC_GetSysClockFreq+0x114>)
 80037ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b0c      	cmp	r3, #12
 80037f4:	d134      	bne.n	8003860 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037f6:	4b1e      	ldr	r3, [pc, #120]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d003      	beq.n	800380e <HAL_RCC_GetSysClockFreq+0xa6>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b03      	cmp	r3, #3
 800380a:	d003      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0xac>
 800380c:	e005      	b.n	800381a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800380e:	4b1a      	ldr	r3, [pc, #104]	; (8003878 <HAL_RCC_GetSysClockFreq+0x110>)
 8003810:	617b      	str	r3, [r7, #20]
      break;
 8003812:	e005      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_RCC_GetSysClockFreq+0x114>)
 8003816:	617b      	str	r3, [r7, #20]
      break;
 8003818:	e002      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	617b      	str	r3, [r7, #20]
      break;
 800381e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003820:	4b13      	ldr	r3, [pc, #76]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	3301      	adds	r3, #1
 800382c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800382e:	4b10      	ldr	r3, [pc, #64]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	fb03 f202 	mul.w	r2, r3, r2
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	0e5b      	lsrs	r3, r3, #25
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	3301      	adds	r3, #1
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	fbb2 f3f3 	udiv	r3, r2, r3
 800385e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003860:	69bb      	ldr	r3, [r7, #24]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3724      	adds	r7, #36	; 0x24
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	08005b5c 	.word	0x08005b5c
 8003878:	00f42400 	.word	0x00f42400
 800387c:	007a1200 	.word	0x007a1200

08003880 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_RCC_GetHCLKFreq+0x14>)
 8003886:	681b      	ldr	r3, [r3, #0]
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000000 	.word	0x20000000

08003898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800389c:	f7ff fff0 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	0a1b      	lsrs	r3, r3, #8
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4904      	ldr	r1, [pc, #16]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000
 80038c0:	08005b54 	.word	0x08005b54

080038c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038c8:	f7ff ffda 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038cc:	4602      	mov	r2, r0
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	0adb      	lsrs	r3, r3, #11
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	4904      	ldr	r1, [pc, #16]	; (80038ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80038da:	5ccb      	ldrb	r3, [r1, r3]
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000
 80038ec:	08005b54 	.word	0x08005b54

080038f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038fc:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003908:	f7ff f9b6 	bl	8002c78 <HAL_PWREx_GetVoltageRange>
 800390c:	6178      	str	r0, [r7, #20]
 800390e:	e014      	b.n	800393a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003910:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	4a24      	ldr	r2, [pc, #144]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391a:	6593      	str	r3, [r2, #88]	; 0x58
 800391c:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003928:	f7ff f9a6 	bl	8002c78 <HAL_PWREx_GetVoltageRange>
 800392c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800392e:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003938:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003940:	d10b      	bne.n	800395a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d919      	bls.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2ba0      	cmp	r3, #160	; 0xa0
 800394c:	d902      	bls.n	8003954 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800394e:	2302      	movs	r3, #2
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	e013      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003954:	2301      	movs	r3, #1
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	e010      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d902      	bls.n	8003966 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003960:	2303      	movs	r3, #3
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	e00a      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d102      	bne.n	8003972 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800396c:	2302      	movs	r3, #2
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	e004      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b70      	cmp	r3, #112	; 0x70
 8003976:	d101      	bne.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003978:	2301      	movs	r3, #1
 800397a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 0207 	bic.w	r2, r3, #7
 8003984:	4909      	ldr	r1, [pc, #36]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	429a      	cmp	r2, r3
 8003998:	d001      	beq.n	800399e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40022000 	.word	0x40022000

080039b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039b8:	2300      	movs	r3, #0
 80039ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039bc:	2300      	movs	r3, #0
 80039be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d031      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039d4:	d01a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80039d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039da:	d814      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039e4:	d10f      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80039e6:	4b5d      	ldr	r3, [pc, #372]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	4a5c      	ldr	r2, [pc, #368]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039f2:	e00c      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fa44 	bl	8003e88 <RCCEx_PLLSAI1_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a04:	e003      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	74fb      	strb	r3, [r7, #19]
      break;
 8003a0a:	e000      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0e:	7cfb      	ldrb	r3, [r7, #19]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a14:	4b51      	ldr	r3, [pc, #324]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	494e      	ldr	r1, [pc, #312]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a2a:	e001      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 809e 	beq.w	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a42:	4b46      	ldr	r3, [pc, #280]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003a52:	2300      	movs	r3, #0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00d      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a58:	4b40      	ldr	r3, [pc, #256]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	4a3f      	ldr	r2, [pc, #252]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a62:	6593      	str	r3, [r2, #88]	; 0x58
 8003a64:	4b3d      	ldr	r3, [pc, #244]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a70:	2301      	movs	r3, #1
 8003a72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a74:	4b3a      	ldr	r3, [pc, #232]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a39      	ldr	r2, [pc, #228]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a80:	f7fd fa38 	bl	8000ef4 <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a86:	e009      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a88:	f7fd fa34 	bl	8000ef4 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d902      	bls.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	74fb      	strb	r3, [r7, #19]
        break;
 8003a9a:	e005      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a9c:	4b30      	ldr	r3, [pc, #192]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ef      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d15a      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003aae:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01e      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d019      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003aca:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ad6:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	4a1f      	ldr	r2, [pc, #124]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ae6:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003af6:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d016      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fd f9f4 	bl	8000ef4 <HAL_GetTick>
 8003b0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0e:	e00b      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fd f9f0 	bl	8000ef4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d902      	bls.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	74fb      	strb	r3, [r7, #19]
            break;
 8003b26:	e006      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0ec      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003b36:	7cfb      	ldrb	r3, [r7, #19]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b3c:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b4a:	4904      	ldr	r1, [pc, #16]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b52:	e009      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	74bb      	strb	r3, [r7, #18]
 8003b58:	e006      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b68:	7c7b      	ldrb	r3, [r7, #17]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d105      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6e:	4b9e      	ldr	r3, [pc, #632]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b72:	4a9d      	ldr	r2, [pc, #628]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b86:	4b98      	ldr	r3, [pc, #608]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8c:	f023 0203 	bic.w	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4994      	ldr	r1, [pc, #592]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ba8:	4b8f      	ldr	r3, [pc, #572]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bae:	f023 020c 	bic.w	r2, r3, #12
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	498c      	ldr	r1, [pc, #560]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bca:	4b87      	ldr	r3, [pc, #540]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	4983      	ldr	r1, [pc, #524]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bec:	4b7e      	ldr	r3, [pc, #504]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	497b      	ldr	r1, [pc, #492]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c0e:	4b76      	ldr	r3, [pc, #472]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	4972      	ldr	r1, [pc, #456]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c30:	4b6d      	ldr	r3, [pc, #436]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	496a      	ldr	r1, [pc, #424]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c52:	4b65      	ldr	r3, [pc, #404]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c60:	4961      	ldr	r1, [pc, #388]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c74:	4b5c      	ldr	r3, [pc, #368]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c82:	4959      	ldr	r1, [pc, #356]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c96:	4b54      	ldr	r3, [pc, #336]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	4950      	ldr	r1, [pc, #320]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cb8:	4b4b      	ldr	r3, [pc, #300]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	4948      	ldr	r1, [pc, #288]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cda:	4b43      	ldr	r3, [pc, #268]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ce0:	f023 0203 	bic.w	r2, r3, #3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	493f      	ldr	r1, [pc, #252]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d028      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cfc:	4b3a      	ldr	r3, [pc, #232]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0a:	4937      	ldr	r1, [pc, #220]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d1c:	4b32      	ldr	r3, [pc, #200]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a31      	ldr	r2, [pc, #196]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d26:	60d3      	str	r3, [r2, #12]
 8003d28:	e011      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d32:	d10c      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	2101      	movs	r1, #1
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f8a4 	bl	8003e88 <RCCEx_PLLSAI1_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d028      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d5a:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	491f      	ldr	r1, [pc, #124]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d78:	d106      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	4a1a      	ldr	r2, [pc, #104]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d84:	60d3      	str	r3, [r2, #12]
 8003d86:	e011      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d90:	d10c      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	2101      	movs	r1, #1
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 f875 	bl	8003e88 <RCCEx_PLLSAI1_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02b      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	4908      	ldr	r1, [pc, #32]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd6:	d109      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a02      	ldr	r2, [pc, #8]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de2:	60d3      	str	r3, [r2, #12]
 8003de4:	e014      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f843 	bl	8003e88 <RCCEx_PLLSAI1_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e06:	7cfb      	ldrb	r3, [r7, #19]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01c      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e1c:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	4916      	ldr	r1, [pc, #88]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e3a:	d10c      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	2102      	movs	r1, #2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f820 	bl	8003e88 <RCCEx_PLLSAI1_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e4c:	7cfb      	ldrb	r3, [r7, #19]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003e52:	7cfb      	ldrb	r3, [r7, #19]
 8003e54:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e62:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e70:	4904      	ldr	r1, [pc, #16]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e78:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000

08003e88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e96:	4b74      	ldr	r3, [pc, #464]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d018      	beq.n	8003ed4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ea2:	4b71      	ldr	r3, [pc, #452]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0203 	and.w	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d10d      	bne.n	8003ece <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
       ||
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003eba:	4b6b      	ldr	r3, [pc, #428]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
       ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d047      	beq.n	8003f5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
 8003ed2:	e044      	b.n	8003f5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d018      	beq.n	8003f0e <RCCEx_PLLSAI1_Config+0x86>
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d825      	bhi.n	8003f2c <RCCEx_PLLSAI1_Config+0xa4>
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d002      	beq.n	8003eea <RCCEx_PLLSAI1_Config+0x62>
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d009      	beq.n	8003efc <RCCEx_PLLSAI1_Config+0x74>
 8003ee8:	e020      	b.n	8003f2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eea:	4b5f      	ldr	r3, [pc, #380]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d11d      	bne.n	8003f32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efa:	e01a      	b.n	8003f32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003efc:	4b5a      	ldr	r3, [pc, #360]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d116      	bne.n	8003f36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f0c:	e013      	b.n	8003f36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f0e:	4b56      	ldr	r3, [pc, #344]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f1a:	4b53      	ldr	r3, [pc, #332]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f2a:	e006      	b.n	8003f3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f30:	e004      	b.n	8003f3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f32:	bf00      	nop
 8003f34:	e002      	b.n	8003f3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f36:	bf00      	nop
 8003f38:	e000      	b.n	8003f3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10d      	bne.n	8003f5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f42:	4b49      	ldr	r3, [pc, #292]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6819      	ldr	r1, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	430b      	orrs	r3, r1
 8003f58:	4943      	ldr	r1, [pc, #268]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d17c      	bne.n	800405e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f64:	4b40      	ldr	r3, [pc, #256]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a3f      	ldr	r2, [pc, #252]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f70:	f7fc ffc0 	bl	8000ef4 <HAL_GetTick>
 8003f74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f76:	e009      	b.n	8003f8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f78:	f7fc ffbc 	bl	8000ef4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d902      	bls.n	8003f8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	73fb      	strb	r3, [r7, #15]
        break;
 8003f8a:	e005      	b.n	8003f98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f8c:	4b36      	ldr	r3, [pc, #216]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1ef      	bne.n	8003f78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d15f      	bne.n	800405e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d110      	bne.n	8003fc6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fa4:	4b30      	ldr	r3, [pc, #192]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003fac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6892      	ldr	r2, [r2, #8]
 8003fb4:	0211      	lsls	r1, r2, #8
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68d2      	ldr	r2, [r2, #12]
 8003fba:	06d2      	lsls	r2, r2, #27
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	492a      	ldr	r1, [pc, #168]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	610b      	str	r3, [r1, #16]
 8003fc4:	e027      	b.n	8004016 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d112      	bne.n	8003ff2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fcc:	4b26      	ldr	r3, [pc, #152]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6892      	ldr	r2, [r2, #8]
 8003fdc:	0211      	lsls	r1, r2, #8
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6912      	ldr	r2, [r2, #16]
 8003fe2:	0852      	lsrs	r2, r2, #1
 8003fe4:	3a01      	subs	r2, #1
 8003fe6:	0552      	lsls	r2, r2, #21
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	491f      	ldr	r1, [pc, #124]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	610b      	str	r3, [r1, #16]
 8003ff0:	e011      	b.n	8004016 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ffa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6892      	ldr	r2, [r2, #8]
 8004002:	0211      	lsls	r1, r2, #8
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6952      	ldr	r2, [r2, #20]
 8004008:	0852      	lsrs	r2, r2, #1
 800400a:	3a01      	subs	r2, #1
 800400c:	0652      	lsls	r2, r2, #25
 800400e:	430a      	orrs	r2, r1
 8004010:	4915      	ldr	r1, [pc, #84]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004012:	4313      	orrs	r3, r2
 8004014:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a13      	ldr	r2, [pc, #76]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 800401c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004020:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004022:	f7fc ff67 	bl	8000ef4 <HAL_GetTick>
 8004026:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004028:	e009      	b.n	800403e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800402a:	f7fc ff63 	bl	8000ef4 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d902      	bls.n	800403e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	73fb      	strb	r3, [r7, #15]
          break;
 800403c:	e005      	b.n	800404a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0ef      	beq.n	800402a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	4903      	ldr	r1, [pc, #12]	; (8004068 <RCCEx_PLLSAI1_Config+0x1e0>)
 800405a:	4313      	orrs	r3, r2
 800405c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000

0800406c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e040      	b.n	8004100 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fc fd50 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2224      	movs	r2, #36	; 0x24
 8004098:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0201 	bic.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f8c0 	bl	8004230 <UART_SetConfig>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e022      	b.n	8004100 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fb3a 	bl	800473c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fbc1 	bl	8004880 <UART_CheckIdleState>
 80040fe:	4603      	mov	r3, r0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08a      	sub	sp, #40	; 0x28
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800411c:	2b20      	cmp	r3, #32
 800411e:	f040 8082 	bne.w	8004226 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <HAL_UART_Transmit+0x26>
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e07a      	b.n	8004228 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_UART_Transmit+0x38>
 800413c:	2302      	movs	r3, #2
 800413e:	e073      	b.n	8004228 <HAL_UART_Transmit+0x120>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2221      	movs	r2, #33	; 0x21
 8004154:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004156:	f7fc fecd 	bl	8000ef4 <HAL_GetTick>
 800415a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	88fa      	ldrh	r2, [r7, #6]
 8004160:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	88fa      	ldrh	r2, [r7, #6]
 8004168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004174:	d108      	bne.n	8004188 <HAL_UART_Transmit+0x80>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d104      	bne.n	8004188 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	e003      	b.n	8004190 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800418c:	2300      	movs	r3, #0
 800418e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004198:	e02d      	b.n	80041f6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2200      	movs	r2, #0
 80041a2:	2180      	movs	r1, #128	; 0x80
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fbb4 	bl	8004912 <UART_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e039      	b.n	8004228 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10b      	bne.n	80041d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	881a      	ldrh	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041c6:	b292      	uxth	r2, r2
 80041c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	3302      	adds	r3, #2
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	e008      	b.n	80041e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	781a      	ldrb	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	b292      	uxth	r2, r2
 80041dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3301      	adds	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1cb      	bne.n	800419a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2200      	movs	r2, #0
 800420a:	2140      	movs	r1, #64	; 0x40
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fb80 	bl	8004912 <UART_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e005      	b.n	8004228 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004226:	2302      	movs	r3, #2
  }
}
 8004228:	4618      	mov	r0, r3
 800422a:	3720      	adds	r7, #32
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004234:	b08a      	sub	sp, #40	; 0x28
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	431a      	orrs	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	431a      	orrs	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	4313      	orrs	r3, r2
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4ba5      	ldr	r3, [pc, #660]	; (80044f4 <UART_SetConfig+0x2c4>)
 8004260:	4013      	ands	r3, r2
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004268:	430b      	orrs	r3, r1
 800426a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a9a      	ldr	r2, [pc, #616]	; (80044f8 <UART_SetConfig+0x2c8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004298:	4313      	orrs	r3, r2
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ac:	430a      	orrs	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a91      	ldr	r2, [pc, #580]	; (80044fc <UART_SetConfig+0x2cc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d126      	bne.n	8004308 <UART_SetConfig+0xd8>
 80042ba:	4b91      	ldr	r3, [pc, #580]	; (8004500 <UART_SetConfig+0x2d0>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d81b      	bhi.n	8004300 <UART_SetConfig+0xd0>
 80042c8:	a201      	add	r2, pc, #4	; (adr r2, 80042d0 <UART_SetConfig+0xa0>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	080042e1 	.word	0x080042e1
 80042d4:	080042f1 	.word	0x080042f1
 80042d8:	080042e9 	.word	0x080042e9
 80042dc:	080042f9 	.word	0x080042f9
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e6:	e0d6      	b.n	8004496 <UART_SetConfig+0x266>
 80042e8:	2302      	movs	r3, #2
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ee:	e0d2      	b.n	8004496 <UART_SetConfig+0x266>
 80042f0:	2304      	movs	r3, #4
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f6:	e0ce      	b.n	8004496 <UART_SetConfig+0x266>
 80042f8:	2308      	movs	r3, #8
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e0ca      	b.n	8004496 <UART_SetConfig+0x266>
 8004300:	2310      	movs	r3, #16
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004306:	e0c6      	b.n	8004496 <UART_SetConfig+0x266>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a7d      	ldr	r2, [pc, #500]	; (8004504 <UART_SetConfig+0x2d4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d138      	bne.n	8004384 <UART_SetConfig+0x154>
 8004312:	4b7b      	ldr	r3, [pc, #492]	; (8004500 <UART_SetConfig+0x2d0>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b0c      	cmp	r3, #12
 800431e:	d82d      	bhi.n	800437c <UART_SetConfig+0x14c>
 8004320:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <UART_SetConfig+0xf8>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	0800435d 	.word	0x0800435d
 800432c:	0800437d 	.word	0x0800437d
 8004330:	0800437d 	.word	0x0800437d
 8004334:	0800437d 	.word	0x0800437d
 8004338:	0800436d 	.word	0x0800436d
 800433c:	0800437d 	.word	0x0800437d
 8004340:	0800437d 	.word	0x0800437d
 8004344:	0800437d 	.word	0x0800437d
 8004348:	08004365 	.word	0x08004365
 800434c:	0800437d 	.word	0x0800437d
 8004350:	0800437d 	.word	0x0800437d
 8004354:	0800437d 	.word	0x0800437d
 8004358:	08004375 	.word	0x08004375
 800435c:	2300      	movs	r3, #0
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004362:	e098      	b.n	8004496 <UART_SetConfig+0x266>
 8004364:	2302      	movs	r3, #2
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436a:	e094      	b.n	8004496 <UART_SetConfig+0x266>
 800436c:	2304      	movs	r3, #4
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004372:	e090      	b.n	8004496 <UART_SetConfig+0x266>
 8004374:	2308      	movs	r3, #8
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437a:	e08c      	b.n	8004496 <UART_SetConfig+0x266>
 800437c:	2310      	movs	r3, #16
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004382:	e088      	b.n	8004496 <UART_SetConfig+0x266>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a5f      	ldr	r2, [pc, #380]	; (8004508 <UART_SetConfig+0x2d8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d125      	bne.n	80043da <UART_SetConfig+0x1aa>
 800438e:	4b5c      	ldr	r3, [pc, #368]	; (8004500 <UART_SetConfig+0x2d0>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004394:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004398:	2b30      	cmp	r3, #48	; 0x30
 800439a:	d016      	beq.n	80043ca <UART_SetConfig+0x19a>
 800439c:	2b30      	cmp	r3, #48	; 0x30
 800439e:	d818      	bhi.n	80043d2 <UART_SetConfig+0x1a2>
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d00a      	beq.n	80043ba <UART_SetConfig+0x18a>
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d814      	bhi.n	80043d2 <UART_SetConfig+0x1a2>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <UART_SetConfig+0x182>
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d008      	beq.n	80043c2 <UART_SetConfig+0x192>
 80043b0:	e00f      	b.n	80043d2 <UART_SetConfig+0x1a2>
 80043b2:	2300      	movs	r3, #0
 80043b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b8:	e06d      	b.n	8004496 <UART_SetConfig+0x266>
 80043ba:	2302      	movs	r3, #2
 80043bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c0:	e069      	b.n	8004496 <UART_SetConfig+0x266>
 80043c2:	2304      	movs	r3, #4
 80043c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c8:	e065      	b.n	8004496 <UART_SetConfig+0x266>
 80043ca:	2308      	movs	r3, #8
 80043cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d0:	e061      	b.n	8004496 <UART_SetConfig+0x266>
 80043d2:	2310      	movs	r3, #16
 80043d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d8:	e05d      	b.n	8004496 <UART_SetConfig+0x266>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a4b      	ldr	r2, [pc, #300]	; (800450c <UART_SetConfig+0x2dc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d125      	bne.n	8004430 <UART_SetConfig+0x200>
 80043e4:	4b46      	ldr	r3, [pc, #280]	; (8004500 <UART_SetConfig+0x2d0>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043ee:	2bc0      	cmp	r3, #192	; 0xc0
 80043f0:	d016      	beq.n	8004420 <UART_SetConfig+0x1f0>
 80043f2:	2bc0      	cmp	r3, #192	; 0xc0
 80043f4:	d818      	bhi.n	8004428 <UART_SetConfig+0x1f8>
 80043f6:	2b80      	cmp	r3, #128	; 0x80
 80043f8:	d00a      	beq.n	8004410 <UART_SetConfig+0x1e0>
 80043fa:	2b80      	cmp	r3, #128	; 0x80
 80043fc:	d814      	bhi.n	8004428 <UART_SetConfig+0x1f8>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <UART_SetConfig+0x1d8>
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d008      	beq.n	8004418 <UART_SetConfig+0x1e8>
 8004406:	e00f      	b.n	8004428 <UART_SetConfig+0x1f8>
 8004408:	2300      	movs	r3, #0
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440e:	e042      	b.n	8004496 <UART_SetConfig+0x266>
 8004410:	2302      	movs	r3, #2
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004416:	e03e      	b.n	8004496 <UART_SetConfig+0x266>
 8004418:	2304      	movs	r3, #4
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441e:	e03a      	b.n	8004496 <UART_SetConfig+0x266>
 8004420:	2308      	movs	r3, #8
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	e036      	b.n	8004496 <UART_SetConfig+0x266>
 8004428:	2310      	movs	r3, #16
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442e:	e032      	b.n	8004496 <UART_SetConfig+0x266>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a30      	ldr	r2, [pc, #192]	; (80044f8 <UART_SetConfig+0x2c8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d12a      	bne.n	8004490 <UART_SetConfig+0x260>
 800443a:	4b31      	ldr	r3, [pc, #196]	; (8004500 <UART_SetConfig+0x2d0>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004448:	d01a      	beq.n	8004480 <UART_SetConfig+0x250>
 800444a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800444e:	d81b      	bhi.n	8004488 <UART_SetConfig+0x258>
 8004450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004454:	d00c      	beq.n	8004470 <UART_SetConfig+0x240>
 8004456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445a:	d815      	bhi.n	8004488 <UART_SetConfig+0x258>
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <UART_SetConfig+0x238>
 8004460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004464:	d008      	beq.n	8004478 <UART_SetConfig+0x248>
 8004466:	e00f      	b.n	8004488 <UART_SetConfig+0x258>
 8004468:	2300      	movs	r3, #0
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446e:	e012      	b.n	8004496 <UART_SetConfig+0x266>
 8004470:	2302      	movs	r3, #2
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004476:	e00e      	b.n	8004496 <UART_SetConfig+0x266>
 8004478:	2304      	movs	r3, #4
 800447a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447e:	e00a      	b.n	8004496 <UART_SetConfig+0x266>
 8004480:	2308      	movs	r3, #8
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004486:	e006      	b.n	8004496 <UART_SetConfig+0x266>
 8004488:	2310      	movs	r3, #16
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448e:	e002      	b.n	8004496 <UART_SetConfig+0x266>
 8004490:	2310      	movs	r3, #16
 8004492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a17      	ldr	r2, [pc, #92]	; (80044f8 <UART_SetConfig+0x2c8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	f040 808b 	bne.w	80045b8 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d834      	bhi.n	8004514 <UART_SetConfig+0x2e4>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <UART_SetConfig+0x280>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044d5 	.word	0x080044d5
 80044b4:	08004515 	.word	0x08004515
 80044b8:	080044dd 	.word	0x080044dd
 80044bc:	08004515 	.word	0x08004515
 80044c0:	080044e3 	.word	0x080044e3
 80044c4:	08004515 	.word	0x08004515
 80044c8:	08004515 	.word	0x08004515
 80044cc:	08004515 	.word	0x08004515
 80044d0:	080044eb 	.word	0x080044eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d4:	f7ff f9e0 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 80044d8:	61f8      	str	r0, [r7, #28]
        break;
 80044da:	e021      	b.n	8004520 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044dc:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <UART_SetConfig+0x2e0>)
 80044de:	61fb      	str	r3, [r7, #28]
        break;
 80044e0:	e01e      	b.n	8004520 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e2:	f7ff f941 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 80044e6:	61f8      	str	r0, [r7, #28]
        break;
 80044e8:	e01a      	b.n	8004520 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ee:	61fb      	str	r3, [r7, #28]
        break;
 80044f0:	e016      	b.n	8004520 <UART_SetConfig+0x2f0>
 80044f2:	bf00      	nop
 80044f4:	efff69f3 	.word	0xefff69f3
 80044f8:	40008000 	.word	0x40008000
 80044fc:	40013800 	.word	0x40013800
 8004500:	40021000 	.word	0x40021000
 8004504:	40004400 	.word	0x40004400
 8004508:	40004800 	.word	0x40004800
 800450c:	40004c00 	.word	0x40004c00
 8004510:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800451e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80fa 	beq.w	800471c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	429a      	cmp	r2, r3
 8004536:	d305      	bcc.n	8004544 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	429a      	cmp	r2, r3
 8004542:	d903      	bls.n	800454c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800454a:	e0e7      	b.n	800471c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	2200      	movs	r2, #0
 8004550:	461c      	mov	r4, r3
 8004552:	4615      	mov	r5, r2
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	022b      	lsls	r3, r5, #8
 800455e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004562:	0222      	lsls	r2, r4, #8
 8004564:	68f9      	ldr	r1, [r7, #12]
 8004566:	6849      	ldr	r1, [r1, #4]
 8004568:	0849      	lsrs	r1, r1, #1
 800456a:	2000      	movs	r0, #0
 800456c:	4688      	mov	r8, r1
 800456e:	4681      	mov	r9, r0
 8004570:	eb12 0a08 	adds.w	sl, r2, r8
 8004574:	eb43 0b09 	adc.w	fp, r3, r9
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	607a      	str	r2, [r7, #4]
 8004582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004586:	4650      	mov	r0, sl
 8004588:	4659      	mov	r1, fp
 800458a:	f7fb fe79 	bl	8000280 <__aeabi_uldivmod>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4613      	mov	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800459c:	d308      	bcc.n	80045b0 <UART_SetConfig+0x380>
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a4:	d204      	bcs.n	80045b0 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	e0b5      	b.n	800471c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045b6:	e0b1      	b.n	800471c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c0:	d15d      	bne.n	800467e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80045c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d827      	bhi.n	800461a <UART_SetConfig+0x3ea>
 80045ca:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <UART_SetConfig+0x3a0>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	080045f5 	.word	0x080045f5
 80045d4:	080045fd 	.word	0x080045fd
 80045d8:	08004605 	.word	0x08004605
 80045dc:	0800461b 	.word	0x0800461b
 80045e0:	0800460b 	.word	0x0800460b
 80045e4:	0800461b 	.word	0x0800461b
 80045e8:	0800461b 	.word	0x0800461b
 80045ec:	0800461b 	.word	0x0800461b
 80045f0:	08004613 	.word	0x08004613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f4:	f7ff f950 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 80045f8:	61f8      	str	r0, [r7, #28]
        break;
 80045fa:	e014      	b.n	8004626 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045fc:	f7ff f962 	bl	80038c4 <HAL_RCC_GetPCLK2Freq>
 8004600:	61f8      	str	r0, [r7, #28]
        break;
 8004602:	e010      	b.n	8004626 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004604:	4b4c      	ldr	r3, [pc, #304]	; (8004738 <UART_SetConfig+0x508>)
 8004606:	61fb      	str	r3, [r7, #28]
        break;
 8004608:	e00d      	b.n	8004626 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460a:	f7ff f8ad 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 800460e:	61f8      	str	r0, [r7, #28]
        break;
 8004610:	e009      	b.n	8004626 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004616:	61fb      	str	r3, [r7, #28]
        break;
 8004618:	e005      	b.n	8004626 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004624:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d077      	beq.n	800471c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005a      	lsls	r2, r3, #1
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	085b      	lsrs	r3, r3, #1
 8004636:	441a      	add	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b0f      	cmp	r3, #15
 8004646:	d916      	bls.n	8004676 <UART_SetConfig+0x446>
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464e:	d212      	bcs.n	8004676 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	b29b      	uxth	r3, r3
 8004654:	f023 030f 	bic.w	r3, r3, #15
 8004658:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	b29b      	uxth	r3, r3
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	b29a      	uxth	r2, r3
 8004666:	8afb      	ldrh	r3, [r7, #22]
 8004668:	4313      	orrs	r3, r2
 800466a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	8afa      	ldrh	r2, [r7, #22]
 8004672:	60da      	str	r2, [r3, #12]
 8004674:	e052      	b.n	800471c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800467c:	e04e      	b.n	800471c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800467e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004682:	2b08      	cmp	r3, #8
 8004684:	d827      	bhi.n	80046d6 <UART_SetConfig+0x4a6>
 8004686:	a201      	add	r2, pc, #4	; (adr r2, 800468c <UART_SetConfig+0x45c>)
 8004688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468c:	080046b1 	.word	0x080046b1
 8004690:	080046b9 	.word	0x080046b9
 8004694:	080046c1 	.word	0x080046c1
 8004698:	080046d7 	.word	0x080046d7
 800469c:	080046c7 	.word	0x080046c7
 80046a0:	080046d7 	.word	0x080046d7
 80046a4:	080046d7 	.word	0x080046d7
 80046a8:	080046d7 	.word	0x080046d7
 80046ac:	080046cf 	.word	0x080046cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b0:	f7ff f8f2 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 80046b4:	61f8      	str	r0, [r7, #28]
        break;
 80046b6:	e014      	b.n	80046e2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046b8:	f7ff f904 	bl	80038c4 <HAL_RCC_GetPCLK2Freq>
 80046bc:	61f8      	str	r0, [r7, #28]
        break;
 80046be:	e010      	b.n	80046e2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c0:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <UART_SetConfig+0x508>)
 80046c2:	61fb      	str	r3, [r7, #28]
        break;
 80046c4:	e00d      	b.n	80046e2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046c6:	f7ff f84f 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 80046ca:	61f8      	str	r0, [r7, #28]
        break;
 80046cc:	e009      	b.n	80046e2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d2:	61fb      	str	r3, [r7, #28]
        break;
 80046d4:	e005      	b.n	80046e2 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046e0:	bf00      	nop
    }

    if (pclk != 0U)
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d019      	beq.n	800471c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	085a      	lsrs	r2, r3, #1
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	441a      	add	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b0f      	cmp	r3, #15
 8004700:	d909      	bls.n	8004716 <UART_SetConfig+0x4e6>
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004708:	d205      	bcs.n	8004716 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60da      	str	r2, [r3, #12]
 8004714:	e002      	b.n	800471c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004728:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800472c:	4618      	mov	r0, r3
 800472e:	3728      	adds	r7, #40	; 0x28
 8004730:	46bd      	mov	sp, r7
 8004732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004736:	bf00      	nop
 8004738:	00f42400 	.word	0x00f42400

0800473c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01a      	beq.n	8004852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483a:	d10a      	bne.n	8004852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	605a      	str	r2, [r3, #4]
  }
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af02      	add	r7, sp, #8
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004890:	f7fc fb30 	bl	8000ef4 <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d10e      	bne.n	80048c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f82d 	bl	8004912 <UART_WaitOnFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e023      	b.n	800490a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d10e      	bne.n	80048ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f817 	bl	8004912 <UART_WaitOnFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e00d      	b.n	800490a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b09c      	sub	sp, #112	; 0x70
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004922:	e0a5      	b.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492a:	f000 80a1 	beq.w	8004a70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492e:	f7fc fae1 	bl	8000ef4 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800493a:	429a      	cmp	r2, r3
 800493c:	d302      	bcc.n	8004944 <UART_WaitOnFlagUntilTimeout+0x32>
 800493e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004940:	2b00      	cmp	r3, #0
 8004942:	d13e      	bne.n	80049c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004954:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004958:	667b      	str	r3, [r7, #100]	; 0x64
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004964:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004968:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e6      	bne.n	8004944 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3308      	adds	r3, #8
 800497c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	663b      	str	r3, [r7, #96]	; 0x60
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004996:	64ba      	str	r2, [r7, #72]	; 0x48
 8004998:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800499c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e5      	bne.n	8004976 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e067      	b.n	8004a92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d04f      	beq.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049de:	d147      	bne.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e6      	bne.n	80049ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3308      	adds	r3, #8
 8004a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3308      	adds	r3, #8
 8004a3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a3c:	623a      	str	r2, [r7, #32]
 8004a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	69f9      	ldr	r1, [r7, #28]
 8004a42:	6a3a      	ldr	r2, [r7, #32]
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e5      	bne.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e010      	b.n	8004a92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	69da      	ldr	r2, [r3, #28]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	f43f af4a 	beq.w	8004924 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3770      	adds	r7, #112	; 0x70
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <__errno>:
 8004a9c:	4b01      	ldr	r3, [pc, #4]	; (8004aa4 <__errno+0x8>)
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	2000000c 	.word	0x2000000c

08004aa8 <__libc_init_array>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	4d0d      	ldr	r5, [pc, #52]	; (8004ae0 <__libc_init_array+0x38>)
 8004aac:	4c0d      	ldr	r4, [pc, #52]	; (8004ae4 <__libc_init_array+0x3c>)
 8004aae:	1b64      	subs	r4, r4, r5
 8004ab0:	10a4      	asrs	r4, r4, #2
 8004ab2:	2600      	movs	r6, #0
 8004ab4:	42a6      	cmp	r6, r4
 8004ab6:	d109      	bne.n	8004acc <__libc_init_array+0x24>
 8004ab8:	4d0b      	ldr	r5, [pc, #44]	; (8004ae8 <__libc_init_array+0x40>)
 8004aba:	4c0c      	ldr	r4, [pc, #48]	; (8004aec <__libc_init_array+0x44>)
 8004abc:	f001 f824 	bl	8005b08 <_init>
 8004ac0:	1b64      	subs	r4, r4, r5
 8004ac2:	10a4      	asrs	r4, r4, #2
 8004ac4:	2600      	movs	r6, #0
 8004ac6:	42a6      	cmp	r6, r4
 8004ac8:	d105      	bne.n	8004ad6 <__libc_init_array+0x2e>
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
 8004acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad0:	4798      	blx	r3
 8004ad2:	3601      	adds	r6, #1
 8004ad4:	e7ee      	b.n	8004ab4 <__libc_init_array+0xc>
 8004ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ada:	4798      	blx	r3
 8004adc:	3601      	adds	r6, #1
 8004ade:	e7f2      	b.n	8004ac6 <__libc_init_array+0x1e>
 8004ae0:	08005c2c 	.word	0x08005c2c
 8004ae4:	08005c2c 	.word	0x08005c2c
 8004ae8:	08005c2c 	.word	0x08005c2c
 8004aec:	08005c30 	.word	0x08005c30

08004af0 <memset>:
 8004af0:	4402      	add	r2, r0
 8004af2:	4603      	mov	r3, r0
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d100      	bne.n	8004afa <memset+0xa>
 8004af8:	4770      	bx	lr
 8004afa:	f803 1b01 	strb.w	r1, [r3], #1
 8004afe:	e7f9      	b.n	8004af4 <memset+0x4>

08004b00 <iprintf>:
 8004b00:	b40f      	push	{r0, r1, r2, r3}
 8004b02:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <iprintf+0x2c>)
 8004b04:	b513      	push	{r0, r1, r4, lr}
 8004b06:	681c      	ldr	r4, [r3, #0]
 8004b08:	b124      	cbz	r4, 8004b14 <iprintf+0x14>
 8004b0a:	69a3      	ldr	r3, [r4, #24]
 8004b0c:	b913      	cbnz	r3, 8004b14 <iprintf+0x14>
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f000 fa5e 	bl	8004fd0 <__sinit>
 8004b14:	ab05      	add	r3, sp, #20
 8004b16:	9a04      	ldr	r2, [sp, #16]
 8004b18:	68a1      	ldr	r1, [r4, #8]
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f000 fc67 	bl	80053f0 <_vfiprintf_r>
 8004b22:	b002      	add	sp, #8
 8004b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b28:	b004      	add	sp, #16
 8004b2a:	4770      	bx	lr
 8004b2c:	2000000c 	.word	0x2000000c

08004b30 <_puts_r>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	460e      	mov	r6, r1
 8004b34:	4605      	mov	r5, r0
 8004b36:	b118      	cbz	r0, 8004b40 <_puts_r+0x10>
 8004b38:	6983      	ldr	r3, [r0, #24]
 8004b3a:	b90b      	cbnz	r3, 8004b40 <_puts_r+0x10>
 8004b3c:	f000 fa48 	bl	8004fd0 <__sinit>
 8004b40:	69ab      	ldr	r3, [r5, #24]
 8004b42:	68ac      	ldr	r4, [r5, #8]
 8004b44:	b913      	cbnz	r3, 8004b4c <_puts_r+0x1c>
 8004b46:	4628      	mov	r0, r5
 8004b48:	f000 fa42 	bl	8004fd0 <__sinit>
 8004b4c:	4b2c      	ldr	r3, [pc, #176]	; (8004c00 <_puts_r+0xd0>)
 8004b4e:	429c      	cmp	r4, r3
 8004b50:	d120      	bne.n	8004b94 <_puts_r+0x64>
 8004b52:	686c      	ldr	r4, [r5, #4]
 8004b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b56:	07db      	lsls	r3, r3, #31
 8004b58:	d405      	bmi.n	8004b66 <_puts_r+0x36>
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	0598      	lsls	r0, r3, #22
 8004b5e:	d402      	bmi.n	8004b66 <_puts_r+0x36>
 8004b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b62:	f000 fad3 	bl	800510c <__retarget_lock_acquire_recursive>
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	0719      	lsls	r1, r3, #28
 8004b6a:	d51d      	bpl.n	8004ba8 <_puts_r+0x78>
 8004b6c:	6923      	ldr	r3, [r4, #16]
 8004b6e:	b1db      	cbz	r3, 8004ba8 <_puts_r+0x78>
 8004b70:	3e01      	subs	r6, #1
 8004b72:	68a3      	ldr	r3, [r4, #8]
 8004b74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	60a3      	str	r3, [r4, #8]
 8004b7c:	bb39      	cbnz	r1, 8004bce <_puts_r+0x9e>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	da38      	bge.n	8004bf4 <_puts_r+0xc4>
 8004b82:	4622      	mov	r2, r4
 8004b84:	210a      	movs	r1, #10
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 f848 	bl	8004c1c <__swbuf_r>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d011      	beq.n	8004bb4 <_puts_r+0x84>
 8004b90:	250a      	movs	r5, #10
 8004b92:	e011      	b.n	8004bb8 <_puts_r+0x88>
 8004b94:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <_puts_r+0xd4>)
 8004b96:	429c      	cmp	r4, r3
 8004b98:	d101      	bne.n	8004b9e <_puts_r+0x6e>
 8004b9a:	68ac      	ldr	r4, [r5, #8]
 8004b9c:	e7da      	b.n	8004b54 <_puts_r+0x24>
 8004b9e:	4b1a      	ldr	r3, [pc, #104]	; (8004c08 <_puts_r+0xd8>)
 8004ba0:	429c      	cmp	r4, r3
 8004ba2:	bf08      	it	eq
 8004ba4:	68ec      	ldreq	r4, [r5, #12]
 8004ba6:	e7d5      	b.n	8004b54 <_puts_r+0x24>
 8004ba8:	4621      	mov	r1, r4
 8004baa:	4628      	mov	r0, r5
 8004bac:	f000 f888 	bl	8004cc0 <__swsetup_r>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d0dd      	beq.n	8004b70 <_puts_r+0x40>
 8004bb4:	f04f 35ff 	mov.w	r5, #4294967295
 8004bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bba:	07da      	lsls	r2, r3, #31
 8004bbc:	d405      	bmi.n	8004bca <_puts_r+0x9a>
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	059b      	lsls	r3, r3, #22
 8004bc2:	d402      	bmi.n	8004bca <_puts_r+0x9a>
 8004bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bc6:	f000 faa2 	bl	800510e <__retarget_lock_release_recursive>
 8004bca:	4628      	mov	r0, r5
 8004bcc:	bd70      	pop	{r4, r5, r6, pc}
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	da04      	bge.n	8004bdc <_puts_r+0xac>
 8004bd2:	69a2      	ldr	r2, [r4, #24]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	dc06      	bgt.n	8004be6 <_puts_r+0xb6>
 8004bd8:	290a      	cmp	r1, #10
 8004bda:	d004      	beq.n	8004be6 <_puts_r+0xb6>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	6022      	str	r2, [r4, #0]
 8004be2:	7019      	strb	r1, [r3, #0]
 8004be4:	e7c5      	b.n	8004b72 <_puts_r+0x42>
 8004be6:	4622      	mov	r2, r4
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 f817 	bl	8004c1c <__swbuf_r>
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d1bf      	bne.n	8004b72 <_puts_r+0x42>
 8004bf2:	e7df      	b.n	8004bb4 <_puts_r+0x84>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	250a      	movs	r5, #10
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	6022      	str	r2, [r4, #0]
 8004bfc:	701d      	strb	r5, [r3, #0]
 8004bfe:	e7db      	b.n	8004bb8 <_puts_r+0x88>
 8004c00:	08005bb0 	.word	0x08005bb0
 8004c04:	08005bd0 	.word	0x08005bd0
 8004c08:	08005b90 	.word	0x08005b90

08004c0c <puts>:
 8004c0c:	4b02      	ldr	r3, [pc, #8]	; (8004c18 <puts+0xc>)
 8004c0e:	4601      	mov	r1, r0
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	f7ff bf8d 	b.w	8004b30 <_puts_r>
 8004c16:	bf00      	nop
 8004c18:	2000000c 	.word	0x2000000c

08004c1c <__swbuf_r>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	460e      	mov	r6, r1
 8004c20:	4614      	mov	r4, r2
 8004c22:	4605      	mov	r5, r0
 8004c24:	b118      	cbz	r0, 8004c2e <__swbuf_r+0x12>
 8004c26:	6983      	ldr	r3, [r0, #24]
 8004c28:	b90b      	cbnz	r3, 8004c2e <__swbuf_r+0x12>
 8004c2a:	f000 f9d1 	bl	8004fd0 <__sinit>
 8004c2e:	4b21      	ldr	r3, [pc, #132]	; (8004cb4 <__swbuf_r+0x98>)
 8004c30:	429c      	cmp	r4, r3
 8004c32:	d12b      	bne.n	8004c8c <__swbuf_r+0x70>
 8004c34:	686c      	ldr	r4, [r5, #4]
 8004c36:	69a3      	ldr	r3, [r4, #24]
 8004c38:	60a3      	str	r3, [r4, #8]
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	071a      	lsls	r2, r3, #28
 8004c3e:	d52f      	bpl.n	8004ca0 <__swbuf_r+0x84>
 8004c40:	6923      	ldr	r3, [r4, #16]
 8004c42:	b36b      	cbz	r3, 8004ca0 <__swbuf_r+0x84>
 8004c44:	6923      	ldr	r3, [r4, #16]
 8004c46:	6820      	ldr	r0, [r4, #0]
 8004c48:	1ac0      	subs	r0, r0, r3
 8004c4a:	6963      	ldr	r3, [r4, #20]
 8004c4c:	b2f6      	uxtb	r6, r6
 8004c4e:	4283      	cmp	r3, r0
 8004c50:	4637      	mov	r7, r6
 8004c52:	dc04      	bgt.n	8004c5e <__swbuf_r+0x42>
 8004c54:	4621      	mov	r1, r4
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 f926 	bl	8004ea8 <_fflush_r>
 8004c5c:	bb30      	cbnz	r0, 8004cac <__swbuf_r+0x90>
 8004c5e:	68a3      	ldr	r3, [r4, #8]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	60a3      	str	r3, [r4, #8]
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	6022      	str	r2, [r4, #0]
 8004c6a:	701e      	strb	r6, [r3, #0]
 8004c6c:	6963      	ldr	r3, [r4, #20]
 8004c6e:	3001      	adds	r0, #1
 8004c70:	4283      	cmp	r3, r0
 8004c72:	d004      	beq.n	8004c7e <__swbuf_r+0x62>
 8004c74:	89a3      	ldrh	r3, [r4, #12]
 8004c76:	07db      	lsls	r3, r3, #31
 8004c78:	d506      	bpl.n	8004c88 <__swbuf_r+0x6c>
 8004c7a:	2e0a      	cmp	r6, #10
 8004c7c:	d104      	bne.n	8004c88 <__swbuf_r+0x6c>
 8004c7e:	4621      	mov	r1, r4
 8004c80:	4628      	mov	r0, r5
 8004c82:	f000 f911 	bl	8004ea8 <_fflush_r>
 8004c86:	b988      	cbnz	r0, 8004cac <__swbuf_r+0x90>
 8004c88:	4638      	mov	r0, r7
 8004c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <__swbuf_r+0x9c>)
 8004c8e:	429c      	cmp	r4, r3
 8004c90:	d101      	bne.n	8004c96 <__swbuf_r+0x7a>
 8004c92:	68ac      	ldr	r4, [r5, #8]
 8004c94:	e7cf      	b.n	8004c36 <__swbuf_r+0x1a>
 8004c96:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <__swbuf_r+0xa0>)
 8004c98:	429c      	cmp	r4, r3
 8004c9a:	bf08      	it	eq
 8004c9c:	68ec      	ldreq	r4, [r5, #12]
 8004c9e:	e7ca      	b.n	8004c36 <__swbuf_r+0x1a>
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f000 f80c 	bl	8004cc0 <__swsetup_r>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d0cb      	beq.n	8004c44 <__swbuf_r+0x28>
 8004cac:	f04f 37ff 	mov.w	r7, #4294967295
 8004cb0:	e7ea      	b.n	8004c88 <__swbuf_r+0x6c>
 8004cb2:	bf00      	nop
 8004cb4:	08005bb0 	.word	0x08005bb0
 8004cb8:	08005bd0 	.word	0x08005bd0
 8004cbc:	08005b90 	.word	0x08005b90

08004cc0 <__swsetup_r>:
 8004cc0:	4b32      	ldr	r3, [pc, #200]	; (8004d8c <__swsetup_r+0xcc>)
 8004cc2:	b570      	push	{r4, r5, r6, lr}
 8004cc4:	681d      	ldr	r5, [r3, #0]
 8004cc6:	4606      	mov	r6, r0
 8004cc8:	460c      	mov	r4, r1
 8004cca:	b125      	cbz	r5, 8004cd6 <__swsetup_r+0x16>
 8004ccc:	69ab      	ldr	r3, [r5, #24]
 8004cce:	b913      	cbnz	r3, 8004cd6 <__swsetup_r+0x16>
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	f000 f97d 	bl	8004fd0 <__sinit>
 8004cd6:	4b2e      	ldr	r3, [pc, #184]	; (8004d90 <__swsetup_r+0xd0>)
 8004cd8:	429c      	cmp	r4, r3
 8004cda:	d10f      	bne.n	8004cfc <__swsetup_r+0x3c>
 8004cdc:	686c      	ldr	r4, [r5, #4]
 8004cde:	89a3      	ldrh	r3, [r4, #12]
 8004ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ce4:	0719      	lsls	r1, r3, #28
 8004ce6:	d42c      	bmi.n	8004d42 <__swsetup_r+0x82>
 8004ce8:	06dd      	lsls	r5, r3, #27
 8004cea:	d411      	bmi.n	8004d10 <__swsetup_r+0x50>
 8004cec:	2309      	movs	r3, #9
 8004cee:	6033      	str	r3, [r6, #0]
 8004cf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cf4:	81a3      	strh	r3, [r4, #12]
 8004cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfa:	e03e      	b.n	8004d7a <__swsetup_r+0xba>
 8004cfc:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <__swsetup_r+0xd4>)
 8004cfe:	429c      	cmp	r4, r3
 8004d00:	d101      	bne.n	8004d06 <__swsetup_r+0x46>
 8004d02:	68ac      	ldr	r4, [r5, #8]
 8004d04:	e7eb      	b.n	8004cde <__swsetup_r+0x1e>
 8004d06:	4b24      	ldr	r3, [pc, #144]	; (8004d98 <__swsetup_r+0xd8>)
 8004d08:	429c      	cmp	r4, r3
 8004d0a:	bf08      	it	eq
 8004d0c:	68ec      	ldreq	r4, [r5, #12]
 8004d0e:	e7e6      	b.n	8004cde <__swsetup_r+0x1e>
 8004d10:	0758      	lsls	r0, r3, #29
 8004d12:	d512      	bpl.n	8004d3a <__swsetup_r+0x7a>
 8004d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d16:	b141      	cbz	r1, 8004d2a <__swsetup_r+0x6a>
 8004d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d1c:	4299      	cmp	r1, r3
 8004d1e:	d002      	beq.n	8004d26 <__swsetup_r+0x66>
 8004d20:	4630      	mov	r0, r6
 8004d22:	f000 fa5b 	bl	80051dc <_free_r>
 8004d26:	2300      	movs	r3, #0
 8004d28:	6363      	str	r3, [r4, #52]	; 0x34
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d30:	81a3      	strh	r3, [r4, #12]
 8004d32:	2300      	movs	r3, #0
 8004d34:	6063      	str	r3, [r4, #4]
 8004d36:	6923      	ldr	r3, [r4, #16]
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	89a3      	ldrh	r3, [r4, #12]
 8004d3c:	f043 0308 	orr.w	r3, r3, #8
 8004d40:	81a3      	strh	r3, [r4, #12]
 8004d42:	6923      	ldr	r3, [r4, #16]
 8004d44:	b94b      	cbnz	r3, 8004d5a <__swsetup_r+0x9a>
 8004d46:	89a3      	ldrh	r3, [r4, #12]
 8004d48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d50:	d003      	beq.n	8004d5a <__swsetup_r+0x9a>
 8004d52:	4621      	mov	r1, r4
 8004d54:	4630      	mov	r0, r6
 8004d56:	f000 fa01 	bl	800515c <__smakebuf_r>
 8004d5a:	89a0      	ldrh	r0, [r4, #12]
 8004d5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d60:	f010 0301 	ands.w	r3, r0, #1
 8004d64:	d00a      	beq.n	8004d7c <__swsetup_r+0xbc>
 8004d66:	2300      	movs	r3, #0
 8004d68:	60a3      	str	r3, [r4, #8]
 8004d6a:	6963      	ldr	r3, [r4, #20]
 8004d6c:	425b      	negs	r3, r3
 8004d6e:	61a3      	str	r3, [r4, #24]
 8004d70:	6923      	ldr	r3, [r4, #16]
 8004d72:	b943      	cbnz	r3, 8004d86 <__swsetup_r+0xc6>
 8004d74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d78:	d1ba      	bne.n	8004cf0 <__swsetup_r+0x30>
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	0781      	lsls	r1, r0, #30
 8004d7e:	bf58      	it	pl
 8004d80:	6963      	ldrpl	r3, [r4, #20]
 8004d82:	60a3      	str	r3, [r4, #8]
 8004d84:	e7f4      	b.n	8004d70 <__swsetup_r+0xb0>
 8004d86:	2000      	movs	r0, #0
 8004d88:	e7f7      	b.n	8004d7a <__swsetup_r+0xba>
 8004d8a:	bf00      	nop
 8004d8c:	2000000c 	.word	0x2000000c
 8004d90:	08005bb0 	.word	0x08005bb0
 8004d94:	08005bd0 	.word	0x08005bd0
 8004d98:	08005b90 	.word	0x08005b90

08004d9c <__sflush_r>:
 8004d9c:	898a      	ldrh	r2, [r1, #12]
 8004d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da2:	4605      	mov	r5, r0
 8004da4:	0710      	lsls	r0, r2, #28
 8004da6:	460c      	mov	r4, r1
 8004da8:	d458      	bmi.n	8004e5c <__sflush_r+0xc0>
 8004daa:	684b      	ldr	r3, [r1, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	dc05      	bgt.n	8004dbc <__sflush_r+0x20>
 8004db0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	dc02      	bgt.n	8004dbc <__sflush_r+0x20>
 8004db6:	2000      	movs	r0, #0
 8004db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dbe:	2e00      	cmp	r6, #0
 8004dc0:	d0f9      	beq.n	8004db6 <__sflush_r+0x1a>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004dc8:	682f      	ldr	r7, [r5, #0]
 8004dca:	602b      	str	r3, [r5, #0]
 8004dcc:	d032      	beq.n	8004e34 <__sflush_r+0x98>
 8004dce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	075a      	lsls	r2, r3, #29
 8004dd4:	d505      	bpl.n	8004de2 <__sflush_r+0x46>
 8004dd6:	6863      	ldr	r3, [r4, #4]
 8004dd8:	1ac0      	subs	r0, r0, r3
 8004dda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ddc:	b10b      	cbz	r3, 8004de2 <__sflush_r+0x46>
 8004dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004de0:	1ac0      	subs	r0, r0, r3
 8004de2:	2300      	movs	r3, #0
 8004de4:	4602      	mov	r2, r0
 8004de6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004de8:	6a21      	ldr	r1, [r4, #32]
 8004dea:	4628      	mov	r0, r5
 8004dec:	47b0      	blx	r6
 8004dee:	1c43      	adds	r3, r0, #1
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	d106      	bne.n	8004e02 <__sflush_r+0x66>
 8004df4:	6829      	ldr	r1, [r5, #0]
 8004df6:	291d      	cmp	r1, #29
 8004df8:	d82c      	bhi.n	8004e54 <__sflush_r+0xb8>
 8004dfa:	4a2a      	ldr	r2, [pc, #168]	; (8004ea4 <__sflush_r+0x108>)
 8004dfc:	40ca      	lsrs	r2, r1
 8004dfe:	07d6      	lsls	r6, r2, #31
 8004e00:	d528      	bpl.n	8004e54 <__sflush_r+0xb8>
 8004e02:	2200      	movs	r2, #0
 8004e04:	6062      	str	r2, [r4, #4]
 8004e06:	04d9      	lsls	r1, r3, #19
 8004e08:	6922      	ldr	r2, [r4, #16]
 8004e0a:	6022      	str	r2, [r4, #0]
 8004e0c:	d504      	bpl.n	8004e18 <__sflush_r+0x7c>
 8004e0e:	1c42      	adds	r2, r0, #1
 8004e10:	d101      	bne.n	8004e16 <__sflush_r+0x7a>
 8004e12:	682b      	ldr	r3, [r5, #0]
 8004e14:	b903      	cbnz	r3, 8004e18 <__sflush_r+0x7c>
 8004e16:	6560      	str	r0, [r4, #84]	; 0x54
 8004e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e1a:	602f      	str	r7, [r5, #0]
 8004e1c:	2900      	cmp	r1, #0
 8004e1e:	d0ca      	beq.n	8004db6 <__sflush_r+0x1a>
 8004e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e24:	4299      	cmp	r1, r3
 8004e26:	d002      	beq.n	8004e2e <__sflush_r+0x92>
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f000 f9d7 	bl	80051dc <_free_r>
 8004e2e:	2000      	movs	r0, #0
 8004e30:	6360      	str	r0, [r4, #52]	; 0x34
 8004e32:	e7c1      	b.n	8004db8 <__sflush_r+0x1c>
 8004e34:	6a21      	ldr	r1, [r4, #32]
 8004e36:	2301      	movs	r3, #1
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47b0      	blx	r6
 8004e3c:	1c41      	adds	r1, r0, #1
 8004e3e:	d1c7      	bne.n	8004dd0 <__sflush_r+0x34>
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0c4      	beq.n	8004dd0 <__sflush_r+0x34>
 8004e46:	2b1d      	cmp	r3, #29
 8004e48:	d001      	beq.n	8004e4e <__sflush_r+0xb2>
 8004e4a:	2b16      	cmp	r3, #22
 8004e4c:	d101      	bne.n	8004e52 <__sflush_r+0xb6>
 8004e4e:	602f      	str	r7, [r5, #0]
 8004e50:	e7b1      	b.n	8004db6 <__sflush_r+0x1a>
 8004e52:	89a3      	ldrh	r3, [r4, #12]
 8004e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e58:	81a3      	strh	r3, [r4, #12]
 8004e5a:	e7ad      	b.n	8004db8 <__sflush_r+0x1c>
 8004e5c:	690f      	ldr	r7, [r1, #16]
 8004e5e:	2f00      	cmp	r7, #0
 8004e60:	d0a9      	beq.n	8004db6 <__sflush_r+0x1a>
 8004e62:	0793      	lsls	r3, r2, #30
 8004e64:	680e      	ldr	r6, [r1, #0]
 8004e66:	bf08      	it	eq
 8004e68:	694b      	ldreq	r3, [r1, #20]
 8004e6a:	600f      	str	r7, [r1, #0]
 8004e6c:	bf18      	it	ne
 8004e6e:	2300      	movne	r3, #0
 8004e70:	eba6 0807 	sub.w	r8, r6, r7
 8004e74:	608b      	str	r3, [r1, #8]
 8004e76:	f1b8 0f00 	cmp.w	r8, #0
 8004e7a:	dd9c      	ble.n	8004db6 <__sflush_r+0x1a>
 8004e7c:	6a21      	ldr	r1, [r4, #32]
 8004e7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e80:	4643      	mov	r3, r8
 8004e82:	463a      	mov	r2, r7
 8004e84:	4628      	mov	r0, r5
 8004e86:	47b0      	blx	r6
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	dc06      	bgt.n	8004e9a <__sflush_r+0xfe>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	e78e      	b.n	8004db8 <__sflush_r+0x1c>
 8004e9a:	4407      	add	r7, r0
 8004e9c:	eba8 0800 	sub.w	r8, r8, r0
 8004ea0:	e7e9      	b.n	8004e76 <__sflush_r+0xda>
 8004ea2:	bf00      	nop
 8004ea4:	20400001 	.word	0x20400001

08004ea8 <_fflush_r>:
 8004ea8:	b538      	push	{r3, r4, r5, lr}
 8004eaa:	690b      	ldr	r3, [r1, #16]
 8004eac:	4605      	mov	r5, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	b913      	cbnz	r3, 8004eb8 <_fflush_r+0x10>
 8004eb2:	2500      	movs	r5, #0
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	b118      	cbz	r0, 8004ec2 <_fflush_r+0x1a>
 8004eba:	6983      	ldr	r3, [r0, #24]
 8004ebc:	b90b      	cbnz	r3, 8004ec2 <_fflush_r+0x1a>
 8004ebe:	f000 f887 	bl	8004fd0 <__sinit>
 8004ec2:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <_fflush_r+0x6c>)
 8004ec4:	429c      	cmp	r4, r3
 8004ec6:	d11b      	bne.n	8004f00 <_fflush_r+0x58>
 8004ec8:	686c      	ldr	r4, [r5, #4]
 8004eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0ef      	beq.n	8004eb2 <_fflush_r+0xa>
 8004ed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ed4:	07d0      	lsls	r0, r2, #31
 8004ed6:	d404      	bmi.n	8004ee2 <_fflush_r+0x3a>
 8004ed8:	0599      	lsls	r1, r3, #22
 8004eda:	d402      	bmi.n	8004ee2 <_fflush_r+0x3a>
 8004edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ede:	f000 f915 	bl	800510c <__retarget_lock_acquire_recursive>
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	f7ff ff59 	bl	8004d9c <__sflush_r>
 8004eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eec:	07da      	lsls	r2, r3, #31
 8004eee:	4605      	mov	r5, r0
 8004ef0:	d4e0      	bmi.n	8004eb4 <_fflush_r+0xc>
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	059b      	lsls	r3, r3, #22
 8004ef6:	d4dd      	bmi.n	8004eb4 <_fflush_r+0xc>
 8004ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004efa:	f000 f908 	bl	800510e <__retarget_lock_release_recursive>
 8004efe:	e7d9      	b.n	8004eb4 <_fflush_r+0xc>
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <_fflush_r+0x70>)
 8004f02:	429c      	cmp	r4, r3
 8004f04:	d101      	bne.n	8004f0a <_fflush_r+0x62>
 8004f06:	68ac      	ldr	r4, [r5, #8]
 8004f08:	e7df      	b.n	8004eca <_fflush_r+0x22>
 8004f0a:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <_fflush_r+0x74>)
 8004f0c:	429c      	cmp	r4, r3
 8004f0e:	bf08      	it	eq
 8004f10:	68ec      	ldreq	r4, [r5, #12]
 8004f12:	e7da      	b.n	8004eca <_fflush_r+0x22>
 8004f14:	08005bb0 	.word	0x08005bb0
 8004f18:	08005bd0 	.word	0x08005bd0
 8004f1c:	08005b90 	.word	0x08005b90

08004f20 <std>:
 8004f20:	2300      	movs	r3, #0
 8004f22:	b510      	push	{r4, lr}
 8004f24:	4604      	mov	r4, r0
 8004f26:	e9c0 3300 	strd	r3, r3, [r0]
 8004f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f2e:	6083      	str	r3, [r0, #8]
 8004f30:	8181      	strh	r1, [r0, #12]
 8004f32:	6643      	str	r3, [r0, #100]	; 0x64
 8004f34:	81c2      	strh	r2, [r0, #14]
 8004f36:	6183      	str	r3, [r0, #24]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	2208      	movs	r2, #8
 8004f3c:	305c      	adds	r0, #92	; 0x5c
 8004f3e:	f7ff fdd7 	bl	8004af0 <memset>
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <std+0x38>)
 8004f44:	6263      	str	r3, [r4, #36]	; 0x24
 8004f46:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <std+0x3c>)
 8004f48:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <std+0x40>)
 8004f4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <std+0x44>)
 8004f50:	6224      	str	r4, [r4, #32]
 8004f52:	6323      	str	r3, [r4, #48]	; 0x30
 8004f54:	bd10      	pop	{r4, pc}
 8004f56:	bf00      	nop
 8004f58:	08005999 	.word	0x08005999
 8004f5c:	080059bb 	.word	0x080059bb
 8004f60:	080059f3 	.word	0x080059f3
 8004f64:	08005a17 	.word	0x08005a17

08004f68 <_cleanup_r>:
 8004f68:	4901      	ldr	r1, [pc, #4]	; (8004f70 <_cleanup_r+0x8>)
 8004f6a:	f000 b8af 	b.w	80050cc <_fwalk_reent>
 8004f6e:	bf00      	nop
 8004f70:	08004ea9 	.word	0x08004ea9

08004f74 <__sfmoreglue>:
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	2268      	movs	r2, #104	; 0x68
 8004f78:	1e4d      	subs	r5, r1, #1
 8004f7a:	4355      	muls	r5, r2
 8004f7c:	460e      	mov	r6, r1
 8004f7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f82:	f000 f997 	bl	80052b4 <_malloc_r>
 8004f86:	4604      	mov	r4, r0
 8004f88:	b140      	cbz	r0, 8004f9c <__sfmoreglue+0x28>
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	e9c0 1600 	strd	r1, r6, [r0]
 8004f90:	300c      	adds	r0, #12
 8004f92:	60a0      	str	r0, [r4, #8]
 8004f94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f98:	f7ff fdaa 	bl	8004af0 <memset>
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}

08004fa0 <__sfp_lock_acquire>:
 8004fa0:	4801      	ldr	r0, [pc, #4]	; (8004fa8 <__sfp_lock_acquire+0x8>)
 8004fa2:	f000 b8b3 	b.w	800510c <__retarget_lock_acquire_recursive>
 8004fa6:	bf00      	nop
 8004fa8:	2000020d 	.word	0x2000020d

08004fac <__sfp_lock_release>:
 8004fac:	4801      	ldr	r0, [pc, #4]	; (8004fb4 <__sfp_lock_release+0x8>)
 8004fae:	f000 b8ae 	b.w	800510e <__retarget_lock_release_recursive>
 8004fb2:	bf00      	nop
 8004fb4:	2000020d 	.word	0x2000020d

08004fb8 <__sinit_lock_acquire>:
 8004fb8:	4801      	ldr	r0, [pc, #4]	; (8004fc0 <__sinit_lock_acquire+0x8>)
 8004fba:	f000 b8a7 	b.w	800510c <__retarget_lock_acquire_recursive>
 8004fbe:	bf00      	nop
 8004fc0:	2000020e 	.word	0x2000020e

08004fc4 <__sinit_lock_release>:
 8004fc4:	4801      	ldr	r0, [pc, #4]	; (8004fcc <__sinit_lock_release+0x8>)
 8004fc6:	f000 b8a2 	b.w	800510e <__retarget_lock_release_recursive>
 8004fca:	bf00      	nop
 8004fcc:	2000020e 	.word	0x2000020e

08004fd0 <__sinit>:
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	f7ff fff0 	bl	8004fb8 <__sinit_lock_acquire>
 8004fd8:	69a3      	ldr	r3, [r4, #24]
 8004fda:	b11b      	cbz	r3, 8004fe4 <__sinit+0x14>
 8004fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe0:	f7ff bff0 	b.w	8004fc4 <__sinit_lock_release>
 8004fe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004fe8:	6523      	str	r3, [r4, #80]	; 0x50
 8004fea:	4b13      	ldr	r3, [pc, #76]	; (8005038 <__sinit+0x68>)
 8004fec:	4a13      	ldr	r2, [pc, #76]	; (800503c <__sinit+0x6c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	bf04      	itt	eq
 8004ff6:	2301      	moveq	r3, #1
 8004ff8:	61a3      	streq	r3, [r4, #24]
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f000 f820 	bl	8005040 <__sfp>
 8005000:	6060      	str	r0, [r4, #4]
 8005002:	4620      	mov	r0, r4
 8005004:	f000 f81c 	bl	8005040 <__sfp>
 8005008:	60a0      	str	r0, [r4, #8]
 800500a:	4620      	mov	r0, r4
 800500c:	f000 f818 	bl	8005040 <__sfp>
 8005010:	2200      	movs	r2, #0
 8005012:	60e0      	str	r0, [r4, #12]
 8005014:	2104      	movs	r1, #4
 8005016:	6860      	ldr	r0, [r4, #4]
 8005018:	f7ff ff82 	bl	8004f20 <std>
 800501c:	68a0      	ldr	r0, [r4, #8]
 800501e:	2201      	movs	r2, #1
 8005020:	2109      	movs	r1, #9
 8005022:	f7ff ff7d 	bl	8004f20 <std>
 8005026:	68e0      	ldr	r0, [r4, #12]
 8005028:	2202      	movs	r2, #2
 800502a:	2112      	movs	r1, #18
 800502c:	f7ff ff78 	bl	8004f20 <std>
 8005030:	2301      	movs	r3, #1
 8005032:	61a3      	str	r3, [r4, #24]
 8005034:	e7d2      	b.n	8004fdc <__sinit+0xc>
 8005036:	bf00      	nop
 8005038:	08005b8c 	.word	0x08005b8c
 800503c:	08004f69 	.word	0x08004f69

08005040 <__sfp>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	4607      	mov	r7, r0
 8005044:	f7ff ffac 	bl	8004fa0 <__sfp_lock_acquire>
 8005048:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <__sfp+0x84>)
 800504a:	681e      	ldr	r6, [r3, #0]
 800504c:	69b3      	ldr	r3, [r6, #24]
 800504e:	b913      	cbnz	r3, 8005056 <__sfp+0x16>
 8005050:	4630      	mov	r0, r6
 8005052:	f7ff ffbd 	bl	8004fd0 <__sinit>
 8005056:	3648      	adds	r6, #72	; 0x48
 8005058:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800505c:	3b01      	subs	r3, #1
 800505e:	d503      	bpl.n	8005068 <__sfp+0x28>
 8005060:	6833      	ldr	r3, [r6, #0]
 8005062:	b30b      	cbz	r3, 80050a8 <__sfp+0x68>
 8005064:	6836      	ldr	r6, [r6, #0]
 8005066:	e7f7      	b.n	8005058 <__sfp+0x18>
 8005068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800506c:	b9d5      	cbnz	r5, 80050a4 <__sfp+0x64>
 800506e:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <__sfp+0x88>)
 8005070:	60e3      	str	r3, [r4, #12]
 8005072:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005076:	6665      	str	r5, [r4, #100]	; 0x64
 8005078:	f000 f847 	bl	800510a <__retarget_lock_init_recursive>
 800507c:	f7ff ff96 	bl	8004fac <__sfp_lock_release>
 8005080:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005084:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005088:	6025      	str	r5, [r4, #0]
 800508a:	61a5      	str	r5, [r4, #24]
 800508c:	2208      	movs	r2, #8
 800508e:	4629      	mov	r1, r5
 8005090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005094:	f7ff fd2c 	bl	8004af0 <memset>
 8005098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800509c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050a0:	4620      	mov	r0, r4
 80050a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050a4:	3468      	adds	r4, #104	; 0x68
 80050a6:	e7d9      	b.n	800505c <__sfp+0x1c>
 80050a8:	2104      	movs	r1, #4
 80050aa:	4638      	mov	r0, r7
 80050ac:	f7ff ff62 	bl	8004f74 <__sfmoreglue>
 80050b0:	4604      	mov	r4, r0
 80050b2:	6030      	str	r0, [r6, #0]
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d1d5      	bne.n	8005064 <__sfp+0x24>
 80050b8:	f7ff ff78 	bl	8004fac <__sfp_lock_release>
 80050bc:	230c      	movs	r3, #12
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	e7ee      	b.n	80050a0 <__sfp+0x60>
 80050c2:	bf00      	nop
 80050c4:	08005b8c 	.word	0x08005b8c
 80050c8:	ffff0001 	.word	0xffff0001

080050cc <_fwalk_reent>:
 80050cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050d0:	4606      	mov	r6, r0
 80050d2:	4688      	mov	r8, r1
 80050d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050d8:	2700      	movs	r7, #0
 80050da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050de:	f1b9 0901 	subs.w	r9, r9, #1
 80050e2:	d505      	bpl.n	80050f0 <_fwalk_reent+0x24>
 80050e4:	6824      	ldr	r4, [r4, #0]
 80050e6:	2c00      	cmp	r4, #0
 80050e8:	d1f7      	bne.n	80050da <_fwalk_reent+0xe>
 80050ea:	4638      	mov	r0, r7
 80050ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050f0:	89ab      	ldrh	r3, [r5, #12]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d907      	bls.n	8005106 <_fwalk_reent+0x3a>
 80050f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050fa:	3301      	adds	r3, #1
 80050fc:	d003      	beq.n	8005106 <_fwalk_reent+0x3a>
 80050fe:	4629      	mov	r1, r5
 8005100:	4630      	mov	r0, r6
 8005102:	47c0      	blx	r8
 8005104:	4307      	orrs	r7, r0
 8005106:	3568      	adds	r5, #104	; 0x68
 8005108:	e7e9      	b.n	80050de <_fwalk_reent+0x12>

0800510a <__retarget_lock_init_recursive>:
 800510a:	4770      	bx	lr

0800510c <__retarget_lock_acquire_recursive>:
 800510c:	4770      	bx	lr

0800510e <__retarget_lock_release_recursive>:
 800510e:	4770      	bx	lr

08005110 <__swhatbuf_r>:
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	460e      	mov	r6, r1
 8005114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005118:	2900      	cmp	r1, #0
 800511a:	b096      	sub	sp, #88	; 0x58
 800511c:	4614      	mov	r4, r2
 800511e:	461d      	mov	r5, r3
 8005120:	da08      	bge.n	8005134 <__swhatbuf_r+0x24>
 8005122:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	602a      	str	r2, [r5, #0]
 800512a:	061a      	lsls	r2, r3, #24
 800512c:	d410      	bmi.n	8005150 <__swhatbuf_r+0x40>
 800512e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005132:	e00e      	b.n	8005152 <__swhatbuf_r+0x42>
 8005134:	466a      	mov	r2, sp
 8005136:	f000 fc95 	bl	8005a64 <_fstat_r>
 800513a:	2800      	cmp	r0, #0
 800513c:	dbf1      	blt.n	8005122 <__swhatbuf_r+0x12>
 800513e:	9a01      	ldr	r2, [sp, #4]
 8005140:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005144:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005148:	425a      	negs	r2, r3
 800514a:	415a      	adcs	r2, r3
 800514c:	602a      	str	r2, [r5, #0]
 800514e:	e7ee      	b.n	800512e <__swhatbuf_r+0x1e>
 8005150:	2340      	movs	r3, #64	; 0x40
 8005152:	2000      	movs	r0, #0
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	b016      	add	sp, #88	; 0x58
 8005158:	bd70      	pop	{r4, r5, r6, pc}
	...

0800515c <__smakebuf_r>:
 800515c:	898b      	ldrh	r3, [r1, #12]
 800515e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005160:	079d      	lsls	r5, r3, #30
 8005162:	4606      	mov	r6, r0
 8005164:	460c      	mov	r4, r1
 8005166:	d507      	bpl.n	8005178 <__smakebuf_r+0x1c>
 8005168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	6123      	str	r3, [r4, #16]
 8005170:	2301      	movs	r3, #1
 8005172:	6163      	str	r3, [r4, #20]
 8005174:	b002      	add	sp, #8
 8005176:	bd70      	pop	{r4, r5, r6, pc}
 8005178:	ab01      	add	r3, sp, #4
 800517a:	466a      	mov	r2, sp
 800517c:	f7ff ffc8 	bl	8005110 <__swhatbuf_r>
 8005180:	9900      	ldr	r1, [sp, #0]
 8005182:	4605      	mov	r5, r0
 8005184:	4630      	mov	r0, r6
 8005186:	f000 f895 	bl	80052b4 <_malloc_r>
 800518a:	b948      	cbnz	r0, 80051a0 <__smakebuf_r+0x44>
 800518c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005190:	059a      	lsls	r2, r3, #22
 8005192:	d4ef      	bmi.n	8005174 <__smakebuf_r+0x18>
 8005194:	f023 0303 	bic.w	r3, r3, #3
 8005198:	f043 0302 	orr.w	r3, r3, #2
 800519c:	81a3      	strh	r3, [r4, #12]
 800519e:	e7e3      	b.n	8005168 <__smakebuf_r+0xc>
 80051a0:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <__smakebuf_r+0x7c>)
 80051a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	6020      	str	r0, [r4, #0]
 80051a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ac:	81a3      	strh	r3, [r4, #12]
 80051ae:	9b00      	ldr	r3, [sp, #0]
 80051b0:	6163      	str	r3, [r4, #20]
 80051b2:	9b01      	ldr	r3, [sp, #4]
 80051b4:	6120      	str	r0, [r4, #16]
 80051b6:	b15b      	cbz	r3, 80051d0 <__smakebuf_r+0x74>
 80051b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051bc:	4630      	mov	r0, r6
 80051be:	f000 fc63 	bl	8005a88 <_isatty_r>
 80051c2:	b128      	cbz	r0, 80051d0 <__smakebuf_r+0x74>
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	f023 0303 	bic.w	r3, r3, #3
 80051ca:	f043 0301 	orr.w	r3, r3, #1
 80051ce:	81a3      	strh	r3, [r4, #12]
 80051d0:	89a0      	ldrh	r0, [r4, #12]
 80051d2:	4305      	orrs	r5, r0
 80051d4:	81a5      	strh	r5, [r4, #12]
 80051d6:	e7cd      	b.n	8005174 <__smakebuf_r+0x18>
 80051d8:	08004f69 	.word	0x08004f69

080051dc <_free_r>:
 80051dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051de:	2900      	cmp	r1, #0
 80051e0:	d044      	beq.n	800526c <_free_r+0x90>
 80051e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051e6:	9001      	str	r0, [sp, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f1a1 0404 	sub.w	r4, r1, #4
 80051ee:	bfb8      	it	lt
 80051f0:	18e4      	addlt	r4, r4, r3
 80051f2:	f000 fc6b 	bl	8005acc <__malloc_lock>
 80051f6:	4a1e      	ldr	r2, [pc, #120]	; (8005270 <_free_r+0x94>)
 80051f8:	9801      	ldr	r0, [sp, #4]
 80051fa:	6813      	ldr	r3, [r2, #0]
 80051fc:	b933      	cbnz	r3, 800520c <_free_r+0x30>
 80051fe:	6063      	str	r3, [r4, #4]
 8005200:	6014      	str	r4, [r2, #0]
 8005202:	b003      	add	sp, #12
 8005204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005208:	f000 bc66 	b.w	8005ad8 <__malloc_unlock>
 800520c:	42a3      	cmp	r3, r4
 800520e:	d908      	bls.n	8005222 <_free_r+0x46>
 8005210:	6825      	ldr	r5, [r4, #0]
 8005212:	1961      	adds	r1, r4, r5
 8005214:	428b      	cmp	r3, r1
 8005216:	bf01      	itttt	eq
 8005218:	6819      	ldreq	r1, [r3, #0]
 800521a:	685b      	ldreq	r3, [r3, #4]
 800521c:	1949      	addeq	r1, r1, r5
 800521e:	6021      	streq	r1, [r4, #0]
 8005220:	e7ed      	b.n	80051fe <_free_r+0x22>
 8005222:	461a      	mov	r2, r3
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	b10b      	cbz	r3, 800522c <_free_r+0x50>
 8005228:	42a3      	cmp	r3, r4
 800522a:	d9fa      	bls.n	8005222 <_free_r+0x46>
 800522c:	6811      	ldr	r1, [r2, #0]
 800522e:	1855      	adds	r5, r2, r1
 8005230:	42a5      	cmp	r5, r4
 8005232:	d10b      	bne.n	800524c <_free_r+0x70>
 8005234:	6824      	ldr	r4, [r4, #0]
 8005236:	4421      	add	r1, r4
 8005238:	1854      	adds	r4, r2, r1
 800523a:	42a3      	cmp	r3, r4
 800523c:	6011      	str	r1, [r2, #0]
 800523e:	d1e0      	bne.n	8005202 <_free_r+0x26>
 8005240:	681c      	ldr	r4, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	6053      	str	r3, [r2, #4]
 8005246:	4421      	add	r1, r4
 8005248:	6011      	str	r1, [r2, #0]
 800524a:	e7da      	b.n	8005202 <_free_r+0x26>
 800524c:	d902      	bls.n	8005254 <_free_r+0x78>
 800524e:	230c      	movs	r3, #12
 8005250:	6003      	str	r3, [r0, #0]
 8005252:	e7d6      	b.n	8005202 <_free_r+0x26>
 8005254:	6825      	ldr	r5, [r4, #0]
 8005256:	1961      	adds	r1, r4, r5
 8005258:	428b      	cmp	r3, r1
 800525a:	bf04      	itt	eq
 800525c:	6819      	ldreq	r1, [r3, #0]
 800525e:	685b      	ldreq	r3, [r3, #4]
 8005260:	6063      	str	r3, [r4, #4]
 8005262:	bf04      	itt	eq
 8005264:	1949      	addeq	r1, r1, r5
 8005266:	6021      	streq	r1, [r4, #0]
 8005268:	6054      	str	r4, [r2, #4]
 800526a:	e7ca      	b.n	8005202 <_free_r+0x26>
 800526c:	b003      	add	sp, #12
 800526e:	bd30      	pop	{r4, r5, pc}
 8005270:	20000210 	.word	0x20000210

08005274 <sbrk_aligned>:
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	4e0e      	ldr	r6, [pc, #56]	; (80052b0 <sbrk_aligned+0x3c>)
 8005278:	460c      	mov	r4, r1
 800527a:	6831      	ldr	r1, [r6, #0]
 800527c:	4605      	mov	r5, r0
 800527e:	b911      	cbnz	r1, 8005286 <sbrk_aligned+0x12>
 8005280:	f000 fb7a 	bl	8005978 <_sbrk_r>
 8005284:	6030      	str	r0, [r6, #0]
 8005286:	4621      	mov	r1, r4
 8005288:	4628      	mov	r0, r5
 800528a:	f000 fb75 	bl	8005978 <_sbrk_r>
 800528e:	1c43      	adds	r3, r0, #1
 8005290:	d00a      	beq.n	80052a8 <sbrk_aligned+0x34>
 8005292:	1cc4      	adds	r4, r0, #3
 8005294:	f024 0403 	bic.w	r4, r4, #3
 8005298:	42a0      	cmp	r0, r4
 800529a:	d007      	beq.n	80052ac <sbrk_aligned+0x38>
 800529c:	1a21      	subs	r1, r4, r0
 800529e:	4628      	mov	r0, r5
 80052a0:	f000 fb6a 	bl	8005978 <_sbrk_r>
 80052a4:	3001      	adds	r0, #1
 80052a6:	d101      	bne.n	80052ac <sbrk_aligned+0x38>
 80052a8:	f04f 34ff 	mov.w	r4, #4294967295
 80052ac:	4620      	mov	r0, r4
 80052ae:	bd70      	pop	{r4, r5, r6, pc}
 80052b0:	20000214 	.word	0x20000214

080052b4 <_malloc_r>:
 80052b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b8:	1ccd      	adds	r5, r1, #3
 80052ba:	f025 0503 	bic.w	r5, r5, #3
 80052be:	3508      	adds	r5, #8
 80052c0:	2d0c      	cmp	r5, #12
 80052c2:	bf38      	it	cc
 80052c4:	250c      	movcc	r5, #12
 80052c6:	2d00      	cmp	r5, #0
 80052c8:	4607      	mov	r7, r0
 80052ca:	db01      	blt.n	80052d0 <_malloc_r+0x1c>
 80052cc:	42a9      	cmp	r1, r5
 80052ce:	d905      	bls.n	80052dc <_malloc_r+0x28>
 80052d0:	230c      	movs	r3, #12
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	2600      	movs	r6, #0
 80052d6:	4630      	mov	r0, r6
 80052d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052dc:	4e2e      	ldr	r6, [pc, #184]	; (8005398 <_malloc_r+0xe4>)
 80052de:	f000 fbf5 	bl	8005acc <__malloc_lock>
 80052e2:	6833      	ldr	r3, [r6, #0]
 80052e4:	461c      	mov	r4, r3
 80052e6:	bb34      	cbnz	r4, 8005336 <_malloc_r+0x82>
 80052e8:	4629      	mov	r1, r5
 80052ea:	4638      	mov	r0, r7
 80052ec:	f7ff ffc2 	bl	8005274 <sbrk_aligned>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	4604      	mov	r4, r0
 80052f4:	d14d      	bne.n	8005392 <_malloc_r+0xde>
 80052f6:	6834      	ldr	r4, [r6, #0]
 80052f8:	4626      	mov	r6, r4
 80052fa:	2e00      	cmp	r6, #0
 80052fc:	d140      	bne.n	8005380 <_malloc_r+0xcc>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	4631      	mov	r1, r6
 8005302:	4638      	mov	r0, r7
 8005304:	eb04 0803 	add.w	r8, r4, r3
 8005308:	f000 fb36 	bl	8005978 <_sbrk_r>
 800530c:	4580      	cmp	r8, r0
 800530e:	d13a      	bne.n	8005386 <_malloc_r+0xd2>
 8005310:	6821      	ldr	r1, [r4, #0]
 8005312:	3503      	adds	r5, #3
 8005314:	1a6d      	subs	r5, r5, r1
 8005316:	f025 0503 	bic.w	r5, r5, #3
 800531a:	3508      	adds	r5, #8
 800531c:	2d0c      	cmp	r5, #12
 800531e:	bf38      	it	cc
 8005320:	250c      	movcc	r5, #12
 8005322:	4629      	mov	r1, r5
 8005324:	4638      	mov	r0, r7
 8005326:	f7ff ffa5 	bl	8005274 <sbrk_aligned>
 800532a:	3001      	adds	r0, #1
 800532c:	d02b      	beq.n	8005386 <_malloc_r+0xd2>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	442b      	add	r3, r5
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	e00e      	b.n	8005354 <_malloc_r+0xa0>
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	1b52      	subs	r2, r2, r5
 800533a:	d41e      	bmi.n	800537a <_malloc_r+0xc6>
 800533c:	2a0b      	cmp	r2, #11
 800533e:	d916      	bls.n	800536e <_malloc_r+0xba>
 8005340:	1961      	adds	r1, r4, r5
 8005342:	42a3      	cmp	r3, r4
 8005344:	6025      	str	r5, [r4, #0]
 8005346:	bf18      	it	ne
 8005348:	6059      	strne	r1, [r3, #4]
 800534a:	6863      	ldr	r3, [r4, #4]
 800534c:	bf08      	it	eq
 800534e:	6031      	streq	r1, [r6, #0]
 8005350:	5162      	str	r2, [r4, r5]
 8005352:	604b      	str	r3, [r1, #4]
 8005354:	4638      	mov	r0, r7
 8005356:	f104 060b 	add.w	r6, r4, #11
 800535a:	f000 fbbd 	bl	8005ad8 <__malloc_unlock>
 800535e:	f026 0607 	bic.w	r6, r6, #7
 8005362:	1d23      	adds	r3, r4, #4
 8005364:	1af2      	subs	r2, r6, r3
 8005366:	d0b6      	beq.n	80052d6 <_malloc_r+0x22>
 8005368:	1b9b      	subs	r3, r3, r6
 800536a:	50a3      	str	r3, [r4, r2]
 800536c:	e7b3      	b.n	80052d6 <_malloc_r+0x22>
 800536e:	6862      	ldr	r2, [r4, #4]
 8005370:	42a3      	cmp	r3, r4
 8005372:	bf0c      	ite	eq
 8005374:	6032      	streq	r2, [r6, #0]
 8005376:	605a      	strne	r2, [r3, #4]
 8005378:	e7ec      	b.n	8005354 <_malloc_r+0xa0>
 800537a:	4623      	mov	r3, r4
 800537c:	6864      	ldr	r4, [r4, #4]
 800537e:	e7b2      	b.n	80052e6 <_malloc_r+0x32>
 8005380:	4634      	mov	r4, r6
 8005382:	6876      	ldr	r6, [r6, #4]
 8005384:	e7b9      	b.n	80052fa <_malloc_r+0x46>
 8005386:	230c      	movs	r3, #12
 8005388:	603b      	str	r3, [r7, #0]
 800538a:	4638      	mov	r0, r7
 800538c:	f000 fba4 	bl	8005ad8 <__malloc_unlock>
 8005390:	e7a1      	b.n	80052d6 <_malloc_r+0x22>
 8005392:	6025      	str	r5, [r4, #0]
 8005394:	e7de      	b.n	8005354 <_malloc_r+0xa0>
 8005396:	bf00      	nop
 8005398:	20000210 	.word	0x20000210

0800539c <__sfputc_r>:
 800539c:	6893      	ldr	r3, [r2, #8]
 800539e:	3b01      	subs	r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	b410      	push	{r4}
 80053a4:	6093      	str	r3, [r2, #8]
 80053a6:	da08      	bge.n	80053ba <__sfputc_r+0x1e>
 80053a8:	6994      	ldr	r4, [r2, #24]
 80053aa:	42a3      	cmp	r3, r4
 80053ac:	db01      	blt.n	80053b2 <__sfputc_r+0x16>
 80053ae:	290a      	cmp	r1, #10
 80053b0:	d103      	bne.n	80053ba <__sfputc_r+0x1e>
 80053b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053b6:	f7ff bc31 	b.w	8004c1c <__swbuf_r>
 80053ba:	6813      	ldr	r3, [r2, #0]
 80053bc:	1c58      	adds	r0, r3, #1
 80053be:	6010      	str	r0, [r2, #0]
 80053c0:	7019      	strb	r1, [r3, #0]
 80053c2:	4608      	mov	r0, r1
 80053c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <__sfputs_r>:
 80053ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053cc:	4606      	mov	r6, r0
 80053ce:	460f      	mov	r7, r1
 80053d0:	4614      	mov	r4, r2
 80053d2:	18d5      	adds	r5, r2, r3
 80053d4:	42ac      	cmp	r4, r5
 80053d6:	d101      	bne.n	80053dc <__sfputs_r+0x12>
 80053d8:	2000      	movs	r0, #0
 80053da:	e007      	b.n	80053ec <__sfputs_r+0x22>
 80053dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e0:	463a      	mov	r2, r7
 80053e2:	4630      	mov	r0, r6
 80053e4:	f7ff ffda 	bl	800539c <__sfputc_r>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d1f3      	bne.n	80053d4 <__sfputs_r+0xa>
 80053ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053f0 <_vfiprintf_r>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	460d      	mov	r5, r1
 80053f6:	b09d      	sub	sp, #116	; 0x74
 80053f8:	4614      	mov	r4, r2
 80053fa:	4698      	mov	r8, r3
 80053fc:	4606      	mov	r6, r0
 80053fe:	b118      	cbz	r0, 8005408 <_vfiprintf_r+0x18>
 8005400:	6983      	ldr	r3, [r0, #24]
 8005402:	b90b      	cbnz	r3, 8005408 <_vfiprintf_r+0x18>
 8005404:	f7ff fde4 	bl	8004fd0 <__sinit>
 8005408:	4b89      	ldr	r3, [pc, #548]	; (8005630 <_vfiprintf_r+0x240>)
 800540a:	429d      	cmp	r5, r3
 800540c:	d11b      	bne.n	8005446 <_vfiprintf_r+0x56>
 800540e:	6875      	ldr	r5, [r6, #4]
 8005410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005412:	07d9      	lsls	r1, r3, #31
 8005414:	d405      	bmi.n	8005422 <_vfiprintf_r+0x32>
 8005416:	89ab      	ldrh	r3, [r5, #12]
 8005418:	059a      	lsls	r2, r3, #22
 800541a:	d402      	bmi.n	8005422 <_vfiprintf_r+0x32>
 800541c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800541e:	f7ff fe75 	bl	800510c <__retarget_lock_acquire_recursive>
 8005422:	89ab      	ldrh	r3, [r5, #12]
 8005424:	071b      	lsls	r3, r3, #28
 8005426:	d501      	bpl.n	800542c <_vfiprintf_r+0x3c>
 8005428:	692b      	ldr	r3, [r5, #16]
 800542a:	b9eb      	cbnz	r3, 8005468 <_vfiprintf_r+0x78>
 800542c:	4629      	mov	r1, r5
 800542e:	4630      	mov	r0, r6
 8005430:	f7ff fc46 	bl	8004cc0 <__swsetup_r>
 8005434:	b1c0      	cbz	r0, 8005468 <_vfiprintf_r+0x78>
 8005436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005438:	07dc      	lsls	r4, r3, #31
 800543a:	d50e      	bpl.n	800545a <_vfiprintf_r+0x6a>
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	b01d      	add	sp, #116	; 0x74
 8005442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005446:	4b7b      	ldr	r3, [pc, #492]	; (8005634 <_vfiprintf_r+0x244>)
 8005448:	429d      	cmp	r5, r3
 800544a:	d101      	bne.n	8005450 <_vfiprintf_r+0x60>
 800544c:	68b5      	ldr	r5, [r6, #8]
 800544e:	e7df      	b.n	8005410 <_vfiprintf_r+0x20>
 8005450:	4b79      	ldr	r3, [pc, #484]	; (8005638 <_vfiprintf_r+0x248>)
 8005452:	429d      	cmp	r5, r3
 8005454:	bf08      	it	eq
 8005456:	68f5      	ldreq	r5, [r6, #12]
 8005458:	e7da      	b.n	8005410 <_vfiprintf_r+0x20>
 800545a:	89ab      	ldrh	r3, [r5, #12]
 800545c:	0598      	lsls	r0, r3, #22
 800545e:	d4ed      	bmi.n	800543c <_vfiprintf_r+0x4c>
 8005460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005462:	f7ff fe54 	bl	800510e <__retarget_lock_release_recursive>
 8005466:	e7e9      	b.n	800543c <_vfiprintf_r+0x4c>
 8005468:	2300      	movs	r3, #0
 800546a:	9309      	str	r3, [sp, #36]	; 0x24
 800546c:	2320      	movs	r3, #32
 800546e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005472:	f8cd 800c 	str.w	r8, [sp, #12]
 8005476:	2330      	movs	r3, #48	; 0x30
 8005478:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800563c <_vfiprintf_r+0x24c>
 800547c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005480:	f04f 0901 	mov.w	r9, #1
 8005484:	4623      	mov	r3, r4
 8005486:	469a      	mov	sl, r3
 8005488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800548c:	b10a      	cbz	r2, 8005492 <_vfiprintf_r+0xa2>
 800548e:	2a25      	cmp	r2, #37	; 0x25
 8005490:	d1f9      	bne.n	8005486 <_vfiprintf_r+0x96>
 8005492:	ebba 0b04 	subs.w	fp, sl, r4
 8005496:	d00b      	beq.n	80054b0 <_vfiprintf_r+0xc0>
 8005498:	465b      	mov	r3, fp
 800549a:	4622      	mov	r2, r4
 800549c:	4629      	mov	r1, r5
 800549e:	4630      	mov	r0, r6
 80054a0:	f7ff ff93 	bl	80053ca <__sfputs_r>
 80054a4:	3001      	adds	r0, #1
 80054a6:	f000 80aa 	beq.w	80055fe <_vfiprintf_r+0x20e>
 80054aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ac:	445a      	add	r2, fp
 80054ae:	9209      	str	r2, [sp, #36]	; 0x24
 80054b0:	f89a 3000 	ldrb.w	r3, [sl]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 80a2 	beq.w	80055fe <_vfiprintf_r+0x20e>
 80054ba:	2300      	movs	r3, #0
 80054bc:	f04f 32ff 	mov.w	r2, #4294967295
 80054c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054c4:	f10a 0a01 	add.w	sl, sl, #1
 80054c8:	9304      	str	r3, [sp, #16]
 80054ca:	9307      	str	r3, [sp, #28]
 80054cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054d0:	931a      	str	r3, [sp, #104]	; 0x68
 80054d2:	4654      	mov	r4, sl
 80054d4:	2205      	movs	r2, #5
 80054d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054da:	4858      	ldr	r0, [pc, #352]	; (800563c <_vfiprintf_r+0x24c>)
 80054dc:	f7fa fe80 	bl	80001e0 <memchr>
 80054e0:	9a04      	ldr	r2, [sp, #16]
 80054e2:	b9d8      	cbnz	r0, 800551c <_vfiprintf_r+0x12c>
 80054e4:	06d1      	lsls	r1, r2, #27
 80054e6:	bf44      	itt	mi
 80054e8:	2320      	movmi	r3, #32
 80054ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054ee:	0713      	lsls	r3, r2, #28
 80054f0:	bf44      	itt	mi
 80054f2:	232b      	movmi	r3, #43	; 0x2b
 80054f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054f8:	f89a 3000 	ldrb.w	r3, [sl]
 80054fc:	2b2a      	cmp	r3, #42	; 0x2a
 80054fe:	d015      	beq.n	800552c <_vfiprintf_r+0x13c>
 8005500:	9a07      	ldr	r2, [sp, #28]
 8005502:	4654      	mov	r4, sl
 8005504:	2000      	movs	r0, #0
 8005506:	f04f 0c0a 	mov.w	ip, #10
 800550a:	4621      	mov	r1, r4
 800550c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005510:	3b30      	subs	r3, #48	; 0x30
 8005512:	2b09      	cmp	r3, #9
 8005514:	d94e      	bls.n	80055b4 <_vfiprintf_r+0x1c4>
 8005516:	b1b0      	cbz	r0, 8005546 <_vfiprintf_r+0x156>
 8005518:	9207      	str	r2, [sp, #28]
 800551a:	e014      	b.n	8005546 <_vfiprintf_r+0x156>
 800551c:	eba0 0308 	sub.w	r3, r0, r8
 8005520:	fa09 f303 	lsl.w	r3, r9, r3
 8005524:	4313      	orrs	r3, r2
 8005526:	9304      	str	r3, [sp, #16]
 8005528:	46a2      	mov	sl, r4
 800552a:	e7d2      	b.n	80054d2 <_vfiprintf_r+0xe2>
 800552c:	9b03      	ldr	r3, [sp, #12]
 800552e:	1d19      	adds	r1, r3, #4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	9103      	str	r1, [sp, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	bfbb      	ittet	lt
 8005538:	425b      	neglt	r3, r3
 800553a:	f042 0202 	orrlt.w	r2, r2, #2
 800553e:	9307      	strge	r3, [sp, #28]
 8005540:	9307      	strlt	r3, [sp, #28]
 8005542:	bfb8      	it	lt
 8005544:	9204      	strlt	r2, [sp, #16]
 8005546:	7823      	ldrb	r3, [r4, #0]
 8005548:	2b2e      	cmp	r3, #46	; 0x2e
 800554a:	d10c      	bne.n	8005566 <_vfiprintf_r+0x176>
 800554c:	7863      	ldrb	r3, [r4, #1]
 800554e:	2b2a      	cmp	r3, #42	; 0x2a
 8005550:	d135      	bne.n	80055be <_vfiprintf_r+0x1ce>
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	1d1a      	adds	r2, r3, #4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	9203      	str	r2, [sp, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	bfb8      	it	lt
 800555e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005562:	3402      	adds	r4, #2
 8005564:	9305      	str	r3, [sp, #20]
 8005566:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800564c <_vfiprintf_r+0x25c>
 800556a:	7821      	ldrb	r1, [r4, #0]
 800556c:	2203      	movs	r2, #3
 800556e:	4650      	mov	r0, sl
 8005570:	f7fa fe36 	bl	80001e0 <memchr>
 8005574:	b140      	cbz	r0, 8005588 <_vfiprintf_r+0x198>
 8005576:	2340      	movs	r3, #64	; 0x40
 8005578:	eba0 000a 	sub.w	r0, r0, sl
 800557c:	fa03 f000 	lsl.w	r0, r3, r0
 8005580:	9b04      	ldr	r3, [sp, #16]
 8005582:	4303      	orrs	r3, r0
 8005584:	3401      	adds	r4, #1
 8005586:	9304      	str	r3, [sp, #16]
 8005588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800558c:	482c      	ldr	r0, [pc, #176]	; (8005640 <_vfiprintf_r+0x250>)
 800558e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005592:	2206      	movs	r2, #6
 8005594:	f7fa fe24 	bl	80001e0 <memchr>
 8005598:	2800      	cmp	r0, #0
 800559a:	d03f      	beq.n	800561c <_vfiprintf_r+0x22c>
 800559c:	4b29      	ldr	r3, [pc, #164]	; (8005644 <_vfiprintf_r+0x254>)
 800559e:	bb1b      	cbnz	r3, 80055e8 <_vfiprintf_r+0x1f8>
 80055a0:	9b03      	ldr	r3, [sp, #12]
 80055a2:	3307      	adds	r3, #7
 80055a4:	f023 0307 	bic.w	r3, r3, #7
 80055a8:	3308      	adds	r3, #8
 80055aa:	9303      	str	r3, [sp, #12]
 80055ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ae:	443b      	add	r3, r7
 80055b0:	9309      	str	r3, [sp, #36]	; 0x24
 80055b2:	e767      	b.n	8005484 <_vfiprintf_r+0x94>
 80055b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055b8:	460c      	mov	r4, r1
 80055ba:	2001      	movs	r0, #1
 80055bc:	e7a5      	b.n	800550a <_vfiprintf_r+0x11a>
 80055be:	2300      	movs	r3, #0
 80055c0:	3401      	adds	r4, #1
 80055c2:	9305      	str	r3, [sp, #20]
 80055c4:	4619      	mov	r1, r3
 80055c6:	f04f 0c0a 	mov.w	ip, #10
 80055ca:	4620      	mov	r0, r4
 80055cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055d0:	3a30      	subs	r2, #48	; 0x30
 80055d2:	2a09      	cmp	r2, #9
 80055d4:	d903      	bls.n	80055de <_vfiprintf_r+0x1ee>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0c5      	beq.n	8005566 <_vfiprintf_r+0x176>
 80055da:	9105      	str	r1, [sp, #20]
 80055dc:	e7c3      	b.n	8005566 <_vfiprintf_r+0x176>
 80055de:	fb0c 2101 	mla	r1, ip, r1, r2
 80055e2:	4604      	mov	r4, r0
 80055e4:	2301      	movs	r3, #1
 80055e6:	e7f0      	b.n	80055ca <_vfiprintf_r+0x1da>
 80055e8:	ab03      	add	r3, sp, #12
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	462a      	mov	r2, r5
 80055ee:	4b16      	ldr	r3, [pc, #88]	; (8005648 <_vfiprintf_r+0x258>)
 80055f0:	a904      	add	r1, sp, #16
 80055f2:	4630      	mov	r0, r6
 80055f4:	f3af 8000 	nop.w
 80055f8:	4607      	mov	r7, r0
 80055fa:	1c78      	adds	r0, r7, #1
 80055fc:	d1d6      	bne.n	80055ac <_vfiprintf_r+0x1bc>
 80055fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005600:	07d9      	lsls	r1, r3, #31
 8005602:	d405      	bmi.n	8005610 <_vfiprintf_r+0x220>
 8005604:	89ab      	ldrh	r3, [r5, #12]
 8005606:	059a      	lsls	r2, r3, #22
 8005608:	d402      	bmi.n	8005610 <_vfiprintf_r+0x220>
 800560a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800560c:	f7ff fd7f 	bl	800510e <__retarget_lock_release_recursive>
 8005610:	89ab      	ldrh	r3, [r5, #12]
 8005612:	065b      	lsls	r3, r3, #25
 8005614:	f53f af12 	bmi.w	800543c <_vfiprintf_r+0x4c>
 8005618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800561a:	e711      	b.n	8005440 <_vfiprintf_r+0x50>
 800561c:	ab03      	add	r3, sp, #12
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	462a      	mov	r2, r5
 8005622:	4b09      	ldr	r3, [pc, #36]	; (8005648 <_vfiprintf_r+0x258>)
 8005624:	a904      	add	r1, sp, #16
 8005626:	4630      	mov	r0, r6
 8005628:	f000 f880 	bl	800572c <_printf_i>
 800562c:	e7e4      	b.n	80055f8 <_vfiprintf_r+0x208>
 800562e:	bf00      	nop
 8005630:	08005bb0 	.word	0x08005bb0
 8005634:	08005bd0 	.word	0x08005bd0
 8005638:	08005b90 	.word	0x08005b90
 800563c:	08005bf0 	.word	0x08005bf0
 8005640:	08005bfa 	.word	0x08005bfa
 8005644:	00000000 	.word	0x00000000
 8005648:	080053cb 	.word	0x080053cb
 800564c:	08005bf6 	.word	0x08005bf6

08005650 <_printf_common>:
 8005650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005654:	4616      	mov	r6, r2
 8005656:	4699      	mov	r9, r3
 8005658:	688a      	ldr	r2, [r1, #8]
 800565a:	690b      	ldr	r3, [r1, #16]
 800565c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005660:	4293      	cmp	r3, r2
 8005662:	bfb8      	it	lt
 8005664:	4613      	movlt	r3, r2
 8005666:	6033      	str	r3, [r6, #0]
 8005668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800566c:	4607      	mov	r7, r0
 800566e:	460c      	mov	r4, r1
 8005670:	b10a      	cbz	r2, 8005676 <_printf_common+0x26>
 8005672:	3301      	adds	r3, #1
 8005674:	6033      	str	r3, [r6, #0]
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	0699      	lsls	r1, r3, #26
 800567a:	bf42      	ittt	mi
 800567c:	6833      	ldrmi	r3, [r6, #0]
 800567e:	3302      	addmi	r3, #2
 8005680:	6033      	strmi	r3, [r6, #0]
 8005682:	6825      	ldr	r5, [r4, #0]
 8005684:	f015 0506 	ands.w	r5, r5, #6
 8005688:	d106      	bne.n	8005698 <_printf_common+0x48>
 800568a:	f104 0a19 	add.w	sl, r4, #25
 800568e:	68e3      	ldr	r3, [r4, #12]
 8005690:	6832      	ldr	r2, [r6, #0]
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	42ab      	cmp	r3, r5
 8005696:	dc26      	bgt.n	80056e6 <_printf_common+0x96>
 8005698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800569c:	1e13      	subs	r3, r2, #0
 800569e:	6822      	ldr	r2, [r4, #0]
 80056a0:	bf18      	it	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	0692      	lsls	r2, r2, #26
 80056a6:	d42b      	bmi.n	8005700 <_printf_common+0xb0>
 80056a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056ac:	4649      	mov	r1, r9
 80056ae:	4638      	mov	r0, r7
 80056b0:	47c0      	blx	r8
 80056b2:	3001      	adds	r0, #1
 80056b4:	d01e      	beq.n	80056f4 <_printf_common+0xa4>
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	68e5      	ldr	r5, [r4, #12]
 80056ba:	6832      	ldr	r2, [r6, #0]
 80056bc:	f003 0306 	and.w	r3, r3, #6
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	bf08      	it	eq
 80056c4:	1aad      	subeq	r5, r5, r2
 80056c6:	68a3      	ldr	r3, [r4, #8]
 80056c8:	6922      	ldr	r2, [r4, #16]
 80056ca:	bf0c      	ite	eq
 80056cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056d0:	2500      	movne	r5, #0
 80056d2:	4293      	cmp	r3, r2
 80056d4:	bfc4      	itt	gt
 80056d6:	1a9b      	subgt	r3, r3, r2
 80056d8:	18ed      	addgt	r5, r5, r3
 80056da:	2600      	movs	r6, #0
 80056dc:	341a      	adds	r4, #26
 80056de:	42b5      	cmp	r5, r6
 80056e0:	d11a      	bne.n	8005718 <_printf_common+0xc8>
 80056e2:	2000      	movs	r0, #0
 80056e4:	e008      	b.n	80056f8 <_printf_common+0xa8>
 80056e6:	2301      	movs	r3, #1
 80056e8:	4652      	mov	r2, sl
 80056ea:	4649      	mov	r1, r9
 80056ec:	4638      	mov	r0, r7
 80056ee:	47c0      	blx	r8
 80056f0:	3001      	adds	r0, #1
 80056f2:	d103      	bne.n	80056fc <_printf_common+0xac>
 80056f4:	f04f 30ff 	mov.w	r0, #4294967295
 80056f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fc:	3501      	adds	r5, #1
 80056fe:	e7c6      	b.n	800568e <_printf_common+0x3e>
 8005700:	18e1      	adds	r1, r4, r3
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	2030      	movs	r0, #48	; 0x30
 8005706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800570a:	4422      	add	r2, r4
 800570c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005714:	3302      	adds	r3, #2
 8005716:	e7c7      	b.n	80056a8 <_printf_common+0x58>
 8005718:	2301      	movs	r3, #1
 800571a:	4622      	mov	r2, r4
 800571c:	4649      	mov	r1, r9
 800571e:	4638      	mov	r0, r7
 8005720:	47c0      	blx	r8
 8005722:	3001      	adds	r0, #1
 8005724:	d0e6      	beq.n	80056f4 <_printf_common+0xa4>
 8005726:	3601      	adds	r6, #1
 8005728:	e7d9      	b.n	80056de <_printf_common+0x8e>
	...

0800572c <_printf_i>:
 800572c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005730:	7e0f      	ldrb	r7, [r1, #24]
 8005732:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005734:	2f78      	cmp	r7, #120	; 0x78
 8005736:	4691      	mov	r9, r2
 8005738:	4680      	mov	r8, r0
 800573a:	460c      	mov	r4, r1
 800573c:	469a      	mov	sl, r3
 800573e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005742:	d807      	bhi.n	8005754 <_printf_i+0x28>
 8005744:	2f62      	cmp	r7, #98	; 0x62
 8005746:	d80a      	bhi.n	800575e <_printf_i+0x32>
 8005748:	2f00      	cmp	r7, #0
 800574a:	f000 80d8 	beq.w	80058fe <_printf_i+0x1d2>
 800574e:	2f58      	cmp	r7, #88	; 0x58
 8005750:	f000 80a3 	beq.w	800589a <_printf_i+0x16e>
 8005754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800575c:	e03a      	b.n	80057d4 <_printf_i+0xa8>
 800575e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005762:	2b15      	cmp	r3, #21
 8005764:	d8f6      	bhi.n	8005754 <_printf_i+0x28>
 8005766:	a101      	add	r1, pc, #4	; (adr r1, 800576c <_printf_i+0x40>)
 8005768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800576c:	080057c5 	.word	0x080057c5
 8005770:	080057d9 	.word	0x080057d9
 8005774:	08005755 	.word	0x08005755
 8005778:	08005755 	.word	0x08005755
 800577c:	08005755 	.word	0x08005755
 8005780:	08005755 	.word	0x08005755
 8005784:	080057d9 	.word	0x080057d9
 8005788:	08005755 	.word	0x08005755
 800578c:	08005755 	.word	0x08005755
 8005790:	08005755 	.word	0x08005755
 8005794:	08005755 	.word	0x08005755
 8005798:	080058e5 	.word	0x080058e5
 800579c:	08005809 	.word	0x08005809
 80057a0:	080058c7 	.word	0x080058c7
 80057a4:	08005755 	.word	0x08005755
 80057a8:	08005755 	.word	0x08005755
 80057ac:	08005907 	.word	0x08005907
 80057b0:	08005755 	.word	0x08005755
 80057b4:	08005809 	.word	0x08005809
 80057b8:	08005755 	.word	0x08005755
 80057bc:	08005755 	.word	0x08005755
 80057c0:	080058cf 	.word	0x080058cf
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	1d1a      	adds	r2, r3, #4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	602a      	str	r2, [r5, #0]
 80057cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0a3      	b.n	8005920 <_printf_i+0x1f4>
 80057d8:	6820      	ldr	r0, [r4, #0]
 80057da:	6829      	ldr	r1, [r5, #0]
 80057dc:	0606      	lsls	r6, r0, #24
 80057de:	f101 0304 	add.w	r3, r1, #4
 80057e2:	d50a      	bpl.n	80057fa <_printf_i+0xce>
 80057e4:	680e      	ldr	r6, [r1, #0]
 80057e6:	602b      	str	r3, [r5, #0]
 80057e8:	2e00      	cmp	r6, #0
 80057ea:	da03      	bge.n	80057f4 <_printf_i+0xc8>
 80057ec:	232d      	movs	r3, #45	; 0x2d
 80057ee:	4276      	negs	r6, r6
 80057f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057f4:	485e      	ldr	r0, [pc, #376]	; (8005970 <_printf_i+0x244>)
 80057f6:	230a      	movs	r3, #10
 80057f8:	e019      	b.n	800582e <_printf_i+0x102>
 80057fa:	680e      	ldr	r6, [r1, #0]
 80057fc:	602b      	str	r3, [r5, #0]
 80057fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005802:	bf18      	it	ne
 8005804:	b236      	sxthne	r6, r6
 8005806:	e7ef      	b.n	80057e8 <_printf_i+0xbc>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	6820      	ldr	r0, [r4, #0]
 800580c:	1d19      	adds	r1, r3, #4
 800580e:	6029      	str	r1, [r5, #0]
 8005810:	0601      	lsls	r1, r0, #24
 8005812:	d501      	bpl.n	8005818 <_printf_i+0xec>
 8005814:	681e      	ldr	r6, [r3, #0]
 8005816:	e002      	b.n	800581e <_printf_i+0xf2>
 8005818:	0646      	lsls	r6, r0, #25
 800581a:	d5fb      	bpl.n	8005814 <_printf_i+0xe8>
 800581c:	881e      	ldrh	r6, [r3, #0]
 800581e:	4854      	ldr	r0, [pc, #336]	; (8005970 <_printf_i+0x244>)
 8005820:	2f6f      	cmp	r7, #111	; 0x6f
 8005822:	bf0c      	ite	eq
 8005824:	2308      	moveq	r3, #8
 8005826:	230a      	movne	r3, #10
 8005828:	2100      	movs	r1, #0
 800582a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800582e:	6865      	ldr	r5, [r4, #4]
 8005830:	60a5      	str	r5, [r4, #8]
 8005832:	2d00      	cmp	r5, #0
 8005834:	bfa2      	ittt	ge
 8005836:	6821      	ldrge	r1, [r4, #0]
 8005838:	f021 0104 	bicge.w	r1, r1, #4
 800583c:	6021      	strge	r1, [r4, #0]
 800583e:	b90e      	cbnz	r6, 8005844 <_printf_i+0x118>
 8005840:	2d00      	cmp	r5, #0
 8005842:	d04d      	beq.n	80058e0 <_printf_i+0x1b4>
 8005844:	4615      	mov	r5, r2
 8005846:	fbb6 f1f3 	udiv	r1, r6, r3
 800584a:	fb03 6711 	mls	r7, r3, r1, r6
 800584e:	5dc7      	ldrb	r7, [r0, r7]
 8005850:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005854:	4637      	mov	r7, r6
 8005856:	42bb      	cmp	r3, r7
 8005858:	460e      	mov	r6, r1
 800585a:	d9f4      	bls.n	8005846 <_printf_i+0x11a>
 800585c:	2b08      	cmp	r3, #8
 800585e:	d10b      	bne.n	8005878 <_printf_i+0x14c>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	07de      	lsls	r6, r3, #31
 8005864:	d508      	bpl.n	8005878 <_printf_i+0x14c>
 8005866:	6923      	ldr	r3, [r4, #16]
 8005868:	6861      	ldr	r1, [r4, #4]
 800586a:	4299      	cmp	r1, r3
 800586c:	bfde      	ittt	le
 800586e:	2330      	movle	r3, #48	; 0x30
 8005870:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005874:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005878:	1b52      	subs	r2, r2, r5
 800587a:	6122      	str	r2, [r4, #16]
 800587c:	f8cd a000 	str.w	sl, [sp]
 8005880:	464b      	mov	r3, r9
 8005882:	aa03      	add	r2, sp, #12
 8005884:	4621      	mov	r1, r4
 8005886:	4640      	mov	r0, r8
 8005888:	f7ff fee2 	bl	8005650 <_printf_common>
 800588c:	3001      	adds	r0, #1
 800588e:	d14c      	bne.n	800592a <_printf_i+0x1fe>
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	b004      	add	sp, #16
 8005896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589a:	4835      	ldr	r0, [pc, #212]	; (8005970 <_printf_i+0x244>)
 800589c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058a0:	6829      	ldr	r1, [r5, #0]
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80058a8:	6029      	str	r1, [r5, #0]
 80058aa:	061d      	lsls	r5, r3, #24
 80058ac:	d514      	bpl.n	80058d8 <_printf_i+0x1ac>
 80058ae:	07df      	lsls	r7, r3, #31
 80058b0:	bf44      	itt	mi
 80058b2:	f043 0320 	orrmi.w	r3, r3, #32
 80058b6:	6023      	strmi	r3, [r4, #0]
 80058b8:	b91e      	cbnz	r6, 80058c2 <_printf_i+0x196>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	f023 0320 	bic.w	r3, r3, #32
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	2310      	movs	r3, #16
 80058c4:	e7b0      	b.n	8005828 <_printf_i+0xfc>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	f043 0320 	orr.w	r3, r3, #32
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	2378      	movs	r3, #120	; 0x78
 80058d0:	4828      	ldr	r0, [pc, #160]	; (8005974 <_printf_i+0x248>)
 80058d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058d6:	e7e3      	b.n	80058a0 <_printf_i+0x174>
 80058d8:	0659      	lsls	r1, r3, #25
 80058da:	bf48      	it	mi
 80058dc:	b2b6      	uxthmi	r6, r6
 80058de:	e7e6      	b.n	80058ae <_printf_i+0x182>
 80058e0:	4615      	mov	r5, r2
 80058e2:	e7bb      	b.n	800585c <_printf_i+0x130>
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	6826      	ldr	r6, [r4, #0]
 80058e8:	6961      	ldr	r1, [r4, #20]
 80058ea:	1d18      	adds	r0, r3, #4
 80058ec:	6028      	str	r0, [r5, #0]
 80058ee:	0635      	lsls	r5, r6, #24
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	d501      	bpl.n	80058f8 <_printf_i+0x1cc>
 80058f4:	6019      	str	r1, [r3, #0]
 80058f6:	e002      	b.n	80058fe <_printf_i+0x1d2>
 80058f8:	0670      	lsls	r0, r6, #25
 80058fa:	d5fb      	bpl.n	80058f4 <_printf_i+0x1c8>
 80058fc:	8019      	strh	r1, [r3, #0]
 80058fe:	2300      	movs	r3, #0
 8005900:	6123      	str	r3, [r4, #16]
 8005902:	4615      	mov	r5, r2
 8005904:	e7ba      	b.n	800587c <_printf_i+0x150>
 8005906:	682b      	ldr	r3, [r5, #0]
 8005908:	1d1a      	adds	r2, r3, #4
 800590a:	602a      	str	r2, [r5, #0]
 800590c:	681d      	ldr	r5, [r3, #0]
 800590e:	6862      	ldr	r2, [r4, #4]
 8005910:	2100      	movs	r1, #0
 8005912:	4628      	mov	r0, r5
 8005914:	f7fa fc64 	bl	80001e0 <memchr>
 8005918:	b108      	cbz	r0, 800591e <_printf_i+0x1f2>
 800591a:	1b40      	subs	r0, r0, r5
 800591c:	6060      	str	r0, [r4, #4]
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	6123      	str	r3, [r4, #16]
 8005922:	2300      	movs	r3, #0
 8005924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005928:	e7a8      	b.n	800587c <_printf_i+0x150>
 800592a:	6923      	ldr	r3, [r4, #16]
 800592c:	462a      	mov	r2, r5
 800592e:	4649      	mov	r1, r9
 8005930:	4640      	mov	r0, r8
 8005932:	47d0      	blx	sl
 8005934:	3001      	adds	r0, #1
 8005936:	d0ab      	beq.n	8005890 <_printf_i+0x164>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	079b      	lsls	r3, r3, #30
 800593c:	d413      	bmi.n	8005966 <_printf_i+0x23a>
 800593e:	68e0      	ldr	r0, [r4, #12]
 8005940:	9b03      	ldr	r3, [sp, #12]
 8005942:	4298      	cmp	r0, r3
 8005944:	bfb8      	it	lt
 8005946:	4618      	movlt	r0, r3
 8005948:	e7a4      	b.n	8005894 <_printf_i+0x168>
 800594a:	2301      	movs	r3, #1
 800594c:	4632      	mov	r2, r6
 800594e:	4649      	mov	r1, r9
 8005950:	4640      	mov	r0, r8
 8005952:	47d0      	blx	sl
 8005954:	3001      	adds	r0, #1
 8005956:	d09b      	beq.n	8005890 <_printf_i+0x164>
 8005958:	3501      	adds	r5, #1
 800595a:	68e3      	ldr	r3, [r4, #12]
 800595c:	9903      	ldr	r1, [sp, #12]
 800595e:	1a5b      	subs	r3, r3, r1
 8005960:	42ab      	cmp	r3, r5
 8005962:	dcf2      	bgt.n	800594a <_printf_i+0x21e>
 8005964:	e7eb      	b.n	800593e <_printf_i+0x212>
 8005966:	2500      	movs	r5, #0
 8005968:	f104 0619 	add.w	r6, r4, #25
 800596c:	e7f5      	b.n	800595a <_printf_i+0x22e>
 800596e:	bf00      	nop
 8005970:	08005c01 	.word	0x08005c01
 8005974:	08005c12 	.word	0x08005c12

08005978 <_sbrk_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4d06      	ldr	r5, [pc, #24]	; (8005994 <_sbrk_r+0x1c>)
 800597c:	2300      	movs	r3, #0
 800597e:	4604      	mov	r4, r0
 8005980:	4608      	mov	r0, r1
 8005982:	602b      	str	r3, [r5, #0]
 8005984:	f7fb f9d4 	bl	8000d30 <_sbrk>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d102      	bne.n	8005992 <_sbrk_r+0x1a>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	b103      	cbz	r3, 8005992 <_sbrk_r+0x1a>
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	20000218 	.word	0x20000218

08005998 <__sread>:
 8005998:	b510      	push	{r4, lr}
 800599a:	460c      	mov	r4, r1
 800599c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a0:	f000 f8a0 	bl	8005ae4 <_read_r>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	bfab      	itete	ge
 80059a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059aa:	89a3      	ldrhlt	r3, [r4, #12]
 80059ac:	181b      	addge	r3, r3, r0
 80059ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059b2:	bfac      	ite	ge
 80059b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80059b6:	81a3      	strhlt	r3, [r4, #12]
 80059b8:	bd10      	pop	{r4, pc}

080059ba <__swrite>:
 80059ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059be:	461f      	mov	r7, r3
 80059c0:	898b      	ldrh	r3, [r1, #12]
 80059c2:	05db      	lsls	r3, r3, #23
 80059c4:	4605      	mov	r5, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	4616      	mov	r6, r2
 80059ca:	d505      	bpl.n	80059d8 <__swrite+0x1e>
 80059cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d0:	2302      	movs	r3, #2
 80059d2:	2200      	movs	r2, #0
 80059d4:	f000 f868 	bl	8005aa8 <_lseek_r>
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059e2:	81a3      	strh	r3, [r4, #12]
 80059e4:	4632      	mov	r2, r6
 80059e6:	463b      	mov	r3, r7
 80059e8:	4628      	mov	r0, r5
 80059ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059ee:	f000 b817 	b.w	8005a20 <_write_r>

080059f2 <__sseek>:
 80059f2:	b510      	push	{r4, lr}
 80059f4:	460c      	mov	r4, r1
 80059f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059fa:	f000 f855 	bl	8005aa8 <_lseek_r>
 80059fe:	1c43      	adds	r3, r0, #1
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	bf15      	itete	ne
 8005a04:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a0e:	81a3      	strheq	r3, [r4, #12]
 8005a10:	bf18      	it	ne
 8005a12:	81a3      	strhne	r3, [r4, #12]
 8005a14:	bd10      	pop	{r4, pc}

08005a16 <__sclose>:
 8005a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1a:	f000 b813 	b.w	8005a44 <_close_r>
	...

08005a20 <_write_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4d07      	ldr	r5, [pc, #28]	; (8005a40 <_write_r+0x20>)
 8005a24:	4604      	mov	r4, r0
 8005a26:	4608      	mov	r0, r1
 8005a28:	4611      	mov	r1, r2
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	602a      	str	r2, [r5, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f7fb f92d 	bl	8000c8e <_write>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d102      	bne.n	8005a3e <_write_r+0x1e>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	b103      	cbz	r3, 8005a3e <_write_r+0x1e>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
 8005a40:	20000218 	.word	0x20000218

08005a44 <_close_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4d06      	ldr	r5, [pc, #24]	; (8005a60 <_close_r+0x1c>)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	602b      	str	r3, [r5, #0]
 8005a50:	f7fb f939 	bl	8000cc6 <_close>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_close_r+0x1a>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_close_r+0x1a>
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	20000218 	.word	0x20000218

08005a64 <_fstat_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4d07      	ldr	r5, [pc, #28]	; (8005a84 <_fstat_r+0x20>)
 8005a68:	2300      	movs	r3, #0
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	4611      	mov	r1, r2
 8005a70:	602b      	str	r3, [r5, #0]
 8005a72:	f7fb f934 	bl	8000cde <_fstat>
 8005a76:	1c43      	adds	r3, r0, #1
 8005a78:	d102      	bne.n	8005a80 <_fstat_r+0x1c>
 8005a7a:	682b      	ldr	r3, [r5, #0]
 8005a7c:	b103      	cbz	r3, 8005a80 <_fstat_r+0x1c>
 8005a7e:	6023      	str	r3, [r4, #0]
 8005a80:	bd38      	pop	{r3, r4, r5, pc}
 8005a82:	bf00      	nop
 8005a84:	20000218 	.word	0x20000218

08005a88 <_isatty_r>:
 8005a88:	b538      	push	{r3, r4, r5, lr}
 8005a8a:	4d06      	ldr	r5, [pc, #24]	; (8005aa4 <_isatty_r+0x1c>)
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	4604      	mov	r4, r0
 8005a90:	4608      	mov	r0, r1
 8005a92:	602b      	str	r3, [r5, #0]
 8005a94:	f7fb f933 	bl	8000cfe <_isatty>
 8005a98:	1c43      	adds	r3, r0, #1
 8005a9a:	d102      	bne.n	8005aa2 <_isatty_r+0x1a>
 8005a9c:	682b      	ldr	r3, [r5, #0]
 8005a9e:	b103      	cbz	r3, 8005aa2 <_isatty_r+0x1a>
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	bd38      	pop	{r3, r4, r5, pc}
 8005aa4:	20000218 	.word	0x20000218

08005aa8 <_lseek_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4d07      	ldr	r5, [pc, #28]	; (8005ac8 <_lseek_r+0x20>)
 8005aac:	4604      	mov	r4, r0
 8005aae:	4608      	mov	r0, r1
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	602a      	str	r2, [r5, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f7fb f92c 	bl	8000d14 <_lseek>
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	d102      	bne.n	8005ac6 <_lseek_r+0x1e>
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	b103      	cbz	r3, 8005ac6 <_lseek_r+0x1e>
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	bd38      	pop	{r3, r4, r5, pc}
 8005ac8:	20000218 	.word	0x20000218

08005acc <__malloc_lock>:
 8005acc:	4801      	ldr	r0, [pc, #4]	; (8005ad4 <__malloc_lock+0x8>)
 8005ace:	f7ff bb1d 	b.w	800510c <__retarget_lock_acquire_recursive>
 8005ad2:	bf00      	nop
 8005ad4:	2000020c 	.word	0x2000020c

08005ad8 <__malloc_unlock>:
 8005ad8:	4801      	ldr	r0, [pc, #4]	; (8005ae0 <__malloc_unlock+0x8>)
 8005ada:	f7ff bb18 	b.w	800510e <__retarget_lock_release_recursive>
 8005ade:	bf00      	nop
 8005ae0:	2000020c 	.word	0x2000020c

08005ae4 <_read_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4d07      	ldr	r5, [pc, #28]	; (8005b04 <_read_r+0x20>)
 8005ae8:	4604      	mov	r4, r0
 8005aea:	4608      	mov	r0, r1
 8005aec:	4611      	mov	r1, r2
 8005aee:	2200      	movs	r2, #0
 8005af0:	602a      	str	r2, [r5, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f7fb f8ae 	bl	8000c54 <_read>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_read_r+0x1e>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_read_r+0x1e>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	20000218 	.word	0x20000218

08005b08 <_init>:
 8005b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0a:	bf00      	nop
 8005b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0e:	bc08      	pop	{r3}
 8005b10:	469e      	mov	lr, r3
 8005b12:	4770      	bx	lr

08005b14 <_fini>:
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	bf00      	nop
 8005b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1a:	bc08      	pop	{r3}
 8005b1c:	469e      	mov	lr, r3
 8005b1e:	4770      	bx	lr
